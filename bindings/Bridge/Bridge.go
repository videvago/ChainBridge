// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeProposal struct {
	Status        uint8
	YesVotes      *big.Int
	YesVotesTotal uint8
	ProposedBlock *big.Int
}

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"executor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"executor\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ProposalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RELAYERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"enumBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint200\",\"name\":\"_yesVotes\",\"type\":\"uint200\"},{\"internalType\":\"uint8\",\"name\":\"_yesVotesTotal\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"_proposedBlock\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoleMemberIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"_hasVotedOnProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getDepositKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"enumBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint200\",\"name\":\"_yesVotes\",\"type\":\"uint200\"},{\"internalType\":\"uint8\",\"name\":\"_yesVotesTotal\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"_proposedBlock\",\"type\":\"uint40\"}],\"internalType\":\"structBridge.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"adminChangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"executor\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"v\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"adminNoThreshold\",\"type\":\"uint256\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b50604051620055f1380380620055f18339818101604052810190620000379190620004aa565b60008060006101000a81548160ff02191690831515021790555084600260006101000a81548160ff021916908360ff160217905550826003819055508160048190555080600581905550620000966000801b336200012260201b60201c565b620000c0604051620000a890620005ef565b60405180910390206000801b6200013860201b60201c565b60005b8451811015620001165762000108604051620000df90620005ef565b6040518091039020868381518110620000f457fe5b60200260200101516200015760201b60201c565b8080600101915050620000c3565b50505050505062000734565b620001348282620001e660201b60201c565b5050565b8060016000848152602001908152602001600020600201819055505050565b6200018e6001600084815260200190815260200160002060020154620001826200028a60201b60201c565b6200029260201b60201c565b620001d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c79062000606565b60405180910390fd5b620001e28282620001e660201b60201c565b5050565b620002158160016000858152602001908152602001600020600001620002cb60201b62002f7d1790919060201c565b1562000286576200022b6200028a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6000620002c382600160008681526020019081526020016000206000016200030360201b62002e821790919060201c565b905092915050565b6000620002fb836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200033b60201b60201c565b905092915050565b600062000333836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003b560201b60201c565b905092915050565b60006200034f8383620003b560201b60201c565b620003aa578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620003af565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620003e981620006e6565b92915050565b600082601f8301126200040157600080fd5b815162000418620004128262000656565b62000628565b915081818352602084019350602081019050838560208402820111156200043e57600080fd5b60005b83811015620004725781620004578882620003d8565b84526020840193506020830192505060018101905062000441565b5050505092915050565b6000815190506200048d8162000700565b92915050565b600081519050620004a4816200071a565b92915050565b600080600080600060a08688031215620004c357600080fd5b6000620004d38882890162000493565b955050602086015167ffffffffffffffff811115620004f157600080fd5b620004ff88828901620003ef565b945050604062000512888289016200047c565b935050606062000525888289016200047c565b925050608062000538888289016200047c565b9150509295509295909350565b600062000554602f836200067f565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b6000620005bc600c8362000690565b91507f52454c415945525f524f4c4500000000000000000000000000000000000000006000830152600c82019050919050565b6000620005fc82620005ad565b9150819050919050565b60006020820190508181036000830152620006218162000545565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200064c57600080fd5b8060405250919050565b600067ffffffffffffffff8211156200066e57600080fd5b602082029050602081019050919050565b600082825260208201905092915050565b600081905092915050565b6000620006a882620006af565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b620006f1816200069b565b8114620006fd57600080fd5b50565b6200070b81620006cf565b81146200071757600080fd5b50565b6200072581620006d9565b81146200073157600080fd5b50565b614ead80620007446000396000f3fe6080604052600436106102305760003560e01c806384db809f1161012e578063c5b37c22116100ab578063d1cafc081161006f578063d1cafc081461087f578063d547741f1461089b578063d7a9cd79146108c4578063f2e2af94146108ef578063ffaac0eb1461092f57610230565b8063c5b37c221461079a578063c5ec8970146107c5578063ca15c873146107f0578063cb10f2151461082d578063cdb0f73a1461085657610230565b80639298e2d1116100f25780639298e2d1146106c75780639d82dd63146106f05780639debb3bd14610719578063a217fddf14610744578063beab71311461076f57610230565b806384db809f146105bc5780639010d07c146105f957806391c404ac1461063657806391d148541461065f578063926d7d7f1461069c57610230565b80634603ae38116101bc578063541d554811610180578063541d5548146104d757806356df07d7146105145780635c975abb146105515780635e1fab0f1461057c57806380ae1c28146105a557610230565b80634603ae38146103e25780634713651d1461040b5780634b0b919d146104345780634e056005146104715780634e0df3f61461049a57610230565b806330faa2591161020357806330faa2591461030157806336568abe1461032a57806337376ca814610353578063390ba7f81461037c578063430694cf146103a557610230565b806303047f1514610235578063248a9ca31461025e5780632c3445a41461029b5780632f2ff15d146102d8575b600080fd5b34801561024157600080fd5b5061025c600480360381019061025791906135ee565b610946565b005b34801561026a57600080fd5b5061028560048036038101906102809190613560565b610edd565b60405161029291906145cb565b60405180910390f35b3480156102a757600080fd5b506102c260048036038101906102bd91906138be565b610efd565b6040516102cf91906145cb565b60405180910390f35b3480156102e457600080fd5b506102ff60048036038101906102fa91906135b2565b610f5c565b005b34801561030d57600080fd5b5061032860048036038101906103239190613780565b610fd0565b005b34801561033657600080fd5b50610351600480360381019061034c91906135b2565b611342565b005b34801561035f57600080fd5b5061037a60048036038101906103759190613560565b6113c5565b005b34801561038857600080fd5b506103a3600480360381019061039e9190613560565b61151a565b005b3480156103b157600080fd5b506103cc60048036038101906103c79190613560565b611639565b6040516103d99190614b22565b60405180910390f35b3480156103ee57600080fd5b50610409600480360381019061040491906134eb565b61173e565b005b34801561041757600080fd5b50610432600480360381019061042d9190613651565b6117e4565b005b34801561044057600080fd5b5061045b60048036038101906104569190613846565b611909565b6040516104689190614b58565b60405180910390f35b34801561047d57600080fd5b506104986004803603810190610493919061381d565b611930565b005b3480156104a657600080fd5b506104c160048036038101906104bc91906135b2565b61196f565b6040516104ce9190614b3d565b60405180910390f35b3480156104e357600080fd5b506104fe60048036038101906104f9919061344a565b6119c0565b60405161050b91906145b0565b60405180910390f35b34801561052057600080fd5b5061053b600480360381019061053691906135b2565b6119e6565b60405161054891906145b0565b60405180910390f35b34801561055d57600080fd5b50610566611aef565b60405161057391906145b0565b60405180910390f35b34801561058857600080fd5b506105a3600480360381019061059e919061344a565b611b05565b005b3480156105b157600080fd5b506105ba611b2a565b005b3480156105c857600080fd5b506105e360048036038101906105de9190613560565b611b3c565b6040516105f0919061457a565b60405180910390f35b34801561060557600080fd5b50610620600480360381019061061b91906136a9565b611b6f565b60405161062d919061457a565b60405180910390f35b34801561064257600080fd5b5061065d6004803603810190610658919061381d565b611ba1565b005b34801561066b57600080fd5b50610686600480360381019061068191906135b2565b611bf8565b60405161069391906145b0565b60405180910390f35b3480156106a857600080fd5b506106b1611c2a565b6040516106be91906145cb565b60405180910390f35b3480156106d357600080fd5b506106ee60048036038101906106e991906137c5565b611c41565b005b3480156106fc57600080fd5b506107176004803603810190610712919061344a565b6122f2565b005b34801561072557600080fd5b5061072e6123b1565b60405161073b9190614b3d565b60405180910390f35b34801561075057600080fd5b506107596123b6565b60405161076691906145cb565b60405180910390f35b34801561077b57600080fd5b506107846123bd565b6040516107919190614b73565b60405180910390f35b3480156107a657600080fd5b506107af6123d0565b6040516107bc9190614b3d565b60405180910390f35b3480156107d157600080fd5b506107da6123d6565b6040516107e79190614b3d565b60405180910390f35b3480156107fc57600080fd5b5061081760048036038101906108129190613560565b6123dc565b6040516108249190614b3d565b60405180910390f35b34801561083957600080fd5b50610854600480360381019061084f919061349c565b612403565b005b34801561086257600080fd5b5061087d6004803603810190610878919061344a565b6124cf565b005b610899600480360381019061089491906136e5565b6125ed565b005b3480156108a757600080fd5b506108c260048036038101906108bd91906135b2565b612972565b005b3480156108d057600080fd5b506108d96129e6565b6040516108e69190614b3d565b60405180910390f35b3480156108fb57600080fd5b5061091660048036038101906109119190613560565b6129ec565b604051610926949392919061473b565b60405180910390f35b34801561093b57600080fd5b50610944612a6c565b005b61094e612a7e565b610956612adc565b61095e613226565b600860008681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600481111561099a57fe5b60048111156109a557fe5b81526020016000820160019054906101000a900478ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff16815260200160008201601a9054906101000a900460ff1660ff1660ff16815260200160008201601b9054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681525050905060016004811115610a6357fe5b81600001516004811115610a7357fe5b1115610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab90614aa2565b60405180910390fd5b610abe8133612b2d565b15610afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af590614902565b60405180910390fd5b60006004811115610b0b57fe5b81600001516004811115610b1b57fe5b1415610bb557604051806080016040528060016004811115610b3957fe5b8152602001600078ffffffffffffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681526020014364ffffffffff168152509050847fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e6001604051610ba89190614720565b60405180910390a2610c38565b600554610bcd43836060015164ffffffffff16612b63565b64ffffffffff161115610c3757600481600001906004811115610bec57fe5b90816004811115610bf957fe5b81525050847fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e6004604051610c2e9190614720565b60405180910390a25b5b600480811115610c4457fe5b81600001516004811115610c5457fe5b14610dfb57610c6233612bad565b816020015178ffffffffffffffffffffffffffffffffffffffffffffffffff1617816020019078ffffffffffffffffffffffffffffffffffffffffffffffffff16908178ffffffffffffffffffffffffffffffffffffffffffffffffff168152505080604001805180919060010160ff1660ff16815250506009600086815260200190815260200160002060405180606001604052808681526020018581526020018481525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010155604082015181600201555050847f8e39a8cb5a95479e706618eec60583b10090b821ced6a7a4c125b85a9a7724c88260000151604051610d859190614720565b60405180910390a2600354816040015160ff1610610dfa57600281600001906004811115610daf57fe5b90816004811115610dbc57fe5b81525050847fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e6002604051610df19190614720565b60405180910390a25b5b806008600087815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115610e3357fe5b021790555060208201518160000160016101000a81548178ffffffffffffffffffffffffffffffffffffffffffffffffff021916908378ffffffffffffffffffffffffffffffffffffffffffffffffff160217905550604082015181600001601a6101000a81548160ff021916908360ff160217905550606082015181600001601b6101000a81548164ffffffffff021916908364ffffffffff1602179055509050505050505050565b600060016000838152602001908152602001600020600201549050919050565b6000610f508787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612be1565b90509695505050505050565b610f836001600084815260200190815260200160002060020154610f7e612c1d565b611bf8565b610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb9906147e2565b60405180910390fd5b610fcc8282612c25565b5050565b610fd8612a7e565b610fe0612adc565b600082826000602080821115610ff557600080fd5b8281111561100257600080fd5b60018202840193508181039250505081019061101e9190613560565b905060006008600083815260200190815260200160002090506002600481111561104457fe5b8160000160009054906101000a900460ff16600481111561106157fe5b146110a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109890614a22565b60405180910390fd5b60038160000160006101000a81548160ff021916908360048111156110c257fe5b0217905550817fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e8260000160009054906101000a900460ff166040516111089190614720565b60405180910390a250606060006040519080825280601f01601f1916602001820160405280156111475781602001600182028036833780820191505090505b509050600060096000848152602001908152602001600020905060008090505b81805490508110156111fd578282828154811061118057fe5b90600052602060002090600302016000015483838154811061119e57fe5b9060005260206000209060030201600101548484815481106111bc57fe5b9060005260206000209060030201600201546040516020016111e19493929190614465565b6040516020818303038152906040529250806001019050611167565b5060096000848152602001908152602001600020600061121d919061327e565b5081848460a060c08082111561123257600080fd5b8281111561123f57600080fd5b60018202840193508181039250505081019061125b9190613560565b7fc1e49ae204831e426585ee37d419d260ebc28b2c7a214c549909753eb515c6b48686604060608082111561128f57600080fd5b8281111561129c57600080fd5b6001820284019350818103925050508101906112b8919061381d565b878760606080808211156112cb57600080fd5b828111156112d857600080fd5b6001820284019350818103925050508101906112f4919061381d565b60608651816112ff57fe5b04868a8a60405160200161131694939291906144e8565b60405160208183030381529060405260405161133493929190614b8e565b60405180910390a350505050565b61134a612c1d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae90614b02565b60405180910390fd5b6113c18282612cb9565b5050565b6113cd612d4d565b60006008600083815260200190815260200160002090506004808111156113f057fe5b8160000160009054906101000a900460ff16600481111561140d57fe5b141561144e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611445906148c2565b60405180910390fd5b6005546114774383600001601b9054906101000a900464ffffffffff1664ffffffffff16612b63565b116114b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ae906149c2565b60405180910390fd5b60048160000160006101000a81548160ff021916908360048111156114d857fe5b0217905550817fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e600460405161150e9190614720565b60405180910390a25050565b611522612dbf565b60006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c190614822565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166389aa2453836040518263ffffffff1660e01b815260040161160391906145cb565b600060405180830381600087803b15801561161d57600080fd5b505af1158015611631573d6000803e3d6000fd5b505050505050565b611641613226565b600860008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600481111561167d57fe5b600481111561168857fe5b81526020016000820160019054906101000a900478ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff16815260200160008201601a9054906101000a900460ff1660ff1660ff16815260200160008201601b9054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815250509050919050565b611746612dbf565b60008090505b848490508110156117dd5784848281811061176357fe5b90506020020160208101906117789190613473565b73ffffffffffffffffffffffffffffffffffffffff166108fc84848481811061179d57fe5b905060200201359081150290604051600060405180830381858888f193505050501580156117cf573d6000803e3d6000fd5b50808060010191505061174c565b5050505050565b6117ec612dbf565b60006007600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188b90614822565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16631bc8a4668585856040518463ffffffff1660e01b81526004016118d19392919061464f565b600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b5050505050505050565b60066020528060005260406000206000915054906101000a900467ffffffffffffffff1681565b611938612dbf565b80600381905550807fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a250565b60006001600084815260200190815260200160002060000160000160010160008373ffffffffffffffffffffffffffffffffffffffff1660001b815260200190815260200160002054905092915050565b60006119df6040516119d1906144d3565b604051809103902083611bf8565b9050919050565b6000611ae7600860008581526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166004811115611a2757fe5b6004811115611a3257fe5b81526020016000820160019054906101000a900478ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff16815260200160008201601a9054906101000a900460ff1660ff1660ff16815260200160008201601b9054906101000a900464ffffffffff1664ffffffffff1664ffffffffff168152505083612b2d565b905092915050565b60008060009054906101000a900460ff16905090565b611b0d612dbf565b611b1a6000801b82610f5c565b611b276000801b33611342565b50565b611b32612dbf565b611b3a612e0d565b565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611b998260016000868152602001908152602001600020600001612e6890919063ffffffff16565b905092915050565b611ba9612dbf565b806004541415611bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be590614ae2565b60405180910390fd5b8060048190555050565b6000611c228260016000868152602001908152602001600020600001612e8290919063ffffffff16565b905092915050565b604051611c36906144d3565b604051809103902081565b611c49612adc565b600060209050600084846000602080821115611c6457600080fd5b82811115611c7157600080fd5b600182028401935081810392505050810190611c8d919061381d565b90506000831115611ca557611ca0612dbf565b611ceb565b600354811015611cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce1906147c2565b60405180910390fd5b5b60008585606084026020018180821115611d0457600080fd5b82811115611d1157600080fd5b600182028401935081810392505050604051611d2e92919061444c565b60405180910390209050600080905060008090505b83811015611f0e5760008060008a8a8960608b0180821115611d6457600080fd5b82811115611d7157600080fd5b600182028401935081810392505050810190611d8d919061386f565b925092509250601b8360ff161015611da657601b830192505b601b8360ff161480611dbb5750601c8360ff16145b611dfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df190614a82565b60405180910390fd5b600060018785858560405160008152602001604052604051611e1f9493929190614681565b6020604051602081039080840390855afa158015611e41573d6000803e3d6000fd5b505050602060405103519050611e6a604051611e5c906144d3565b604051809103902082611bf8565b611ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea0906149a2565b60405180910390fd5b611eb281612bad565b8617955085861415611ef9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef090614a42565b60405180910390fd5b60608901985050505050806001019050611d43565b5050505060008484836020850180821115611f2857600080fd5b82811115611f3557600080fd5b600182028401935081810392505050810190611f519190613560565b90506000600a60008381526020019081526020016000205414611fa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa090614942565b60405180910390fd5b6001600a6000838152602001908152602001600020819055505060008484606084016080850180821115611fdc57600080fd5b82811115611fe957600080fd5b600182028401935081810392505050810190612005919061381d565b9050600260009054906101000a900460ff1660ff16811461202557600080fd5b600085856080850160a086018082111561203e57600080fd5b8281111561204b57600080fd5b600182028401935081810392505050810190612067919061381d565b9050601481146120ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a3906148e2565b60405180910390fd5b6000868660a0860160c08701808211156120c557600080fd5b828111156120d257600080fd5b6001820284019350818103925050508101906120ee9190613473565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461215e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215590614882565b60405180910390fd5b5050506000848460208401604085018082111561217a57600080fd5b8281111561218757600080fd5b6001820284019350818103925050508101906121a39190613560565b905060006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224490614ac2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e248cff283888860c08801818082111561227e57600080fd5b8281111561228b57600080fd5b6001820284019350818103925050506040518463ffffffff1660e01b81526004016122b89392919061464f565b600060405180830381600087803b1580156122d257600080fd5b505af11580156122e6573d6000803e3d6000fd5b50505050505050505050565b61230f604051612301906144d3565b604051809103902082611bf8565b61234e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234590614842565b60405180910390fd5b61236b60405161235d906144d3565b604051809103902082612972565b8073ffffffffffffffffffffffffffffffffffffffff167f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b60405160405180910390a250565b60c881565b6000801b81565b600260009054906101000a900460ff1681565b60045481565b60055481565b60006123fc60016000848152602001908152602001600020600001612eb2565b9050919050565b61240b612dbf565b826007600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff1663b8fa373683836040518363ffffffff1660e01b81526004016124989291906145e6565b600060405180830381600087803b1580156124b257600080fd5b505af11580156124c6573d6000803e3d6000fd5b50505050505050565b60c86124ed6040516124e0906144d3565b60405180910390206123dc565b1061252d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252490614a02565b60405180910390fd5b61254a60405161253c906144d3565b604051809103902082611bf8565b1561258a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258190614962565b60405180910390fd5b6125a7604051612599906144d3565b604051809103902082610f5c565b8073ffffffffffffffffffffffffffffffffffffffff167f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c560405160405180910390a250565b6125f5612adc565b6004543414612639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263090614862565b60405180910390fd5b60006007600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d890614ac2565b60405180910390fd5b606085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000601f8251161461279757601f86869050166020036040519080825280601f01601f1916602001820160405280156127725781602001600182028036833780820191505090505b50816040516020016127859291906144af565b60405160208183030381529060405290505b6000600660008960ff1660ff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1660010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905590508273ffffffffffffffffffffffffffffffffffffffff1663b07e54bb8a3388886040518563ffffffff1660e01b8152600401612832949392919061460f565b600060405180830381600087803b15801561284c57600080fd5b505af1158015612860573d6000803e3d6000fd5b5050505060006128c6600260009054906101000a900460ff168a848d8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612be1565b90506060818b600260009054906101000a900460ff1660ff168c60ff168c8c9050888c8c6040516020016129019897969594939291906143d1565b6040516020818303038152906040529050838060200190518101906129269190613589565b7ffd57dc9ac10b00003f5a7c4782aa72f948a333affbe4e85c2ffb1937e5403736838c868f8660405161295d9594939291906146c6565b60405180910390a25050505050505050505050565b6129996001600084815260200190815260200160002060020154612994612c1d565b611bf8565b6129d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129cf90614982565b60405180910390fd5b6129e28282612cb9565b5050565b60035481565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900478ffffffffffffffffffffffffffffffffffffffffffffffffff169080600001601a9054906101000a900460ff169080600001601b9054906101000a900464ffffffffff16905084565b612a74612dbf565b612a7c612ec7565b565b612a9b604051612a8d906144d3565b604051809103902033611bf8565b612ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad1906148a2565b60405180910390fd5b565b6000809054906101000a900460ff1615612b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b22906149e2565b60405180910390fd5b565b600080836020015178ffffffffffffffffffffffffffffffffffffffffffffffffff16612b5984612bad565b1611905092915050565b6000612ba583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612f22565b905092915050565b6000612bd6612bcf604051612bc1906144d3565b60405180910390208461196f565b6001612b63565b6001901b9050919050565b60008585858585604051602001612bfc95949392919061451f565b60405160208183030381529060405280519060200120905095945050505050565b600033905090565b612c4d8160016000858152602001908152602001600020600001612f7d90919063ffffffff16565b15612cb557612c5a612c1d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612ce18160016000858152602001908152602001600020600001612fad90919063ffffffff16565b15612d4957612cee612c1d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b612d5a6000801b33611bf8565b80612d7e5750612d7d604051612d6f906144d3565b604051809103902033611bf8565b5b612dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db490614a62565b60405180910390fd5b565b612dcc6000801b33611bf8565b612e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0290614922565b60405180910390fd5b565b612e15612adc565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051612e5e9190614595565b60405180910390a1565b6000612e778360000183612fdd565b60001c905092915050565b6000612eaa836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61304a565b905092915050565b6000612ec08260000161306d565b9050919050565b612ecf61307e565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051612f189190614595565b60405180910390a1565b6000838311158290612f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f619190614780565b60405180910390fd5b5060008385039050809150509392505050565b6000612fa5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6130ce565b905092915050565b6000612fd5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61313e565b905092915050565b600081836000018054905011613028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301f906147a2565b60405180910390fd5b82600001828154811061303757fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b6000809054906101000a900460ff166130cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c390614802565b60405180910390fd5b565b60006130da838361304a565b613133578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613138565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461321a576000600182039050600060018660000180549050039050600086600001828154811061318957fe5b90600052602060002001549050808760000184815481106131a657fe5b90600052602060002001819055506001830187600101600083815260200190815260200160002081905550866000018054806131de57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050613220565b60009150505b92915050565b60405180608001604052806000600481111561323e57fe5b8152602001600078ffffffffffffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600064ffffffffff1681525090565b508054600082556003029060005260206000209081019061329f91906132a2565b50565b6132d691905b808211156132d25760008082016000905560018201600090556002820160009055506003016132a8565b5090565b90565b6000813590506132e881614ded565b92915050565b6000813590506132fd81614e04565b92915050565b60008083601f84011261331557600080fd5b8235905067ffffffffffffffff81111561332e57600080fd5b60208301915083602082028301111561334657600080fd5b9250929050565b60008083601f84011261335f57600080fd5b8235905067ffffffffffffffff81111561337857600080fd5b60208301915083602082028301111561339057600080fd5b9250929050565b6000813590506133a681614e1b565b92915050565b6000815190506133bb81614e1b565b92915050565b60008083601f8401126133d357600080fd5b8235905067ffffffffffffffff8111156133ec57600080fd5b60208301915083600182028301111561340457600080fd5b9250929050565b60008135905061341a81614e32565b92915050565b60008135905061342f81614e49565b92915050565b60008135905061344481614e60565b92915050565b60006020828403121561345c57600080fd5b600061346a848285016132d9565b91505092915050565b60006020828403121561348557600080fd5b6000613493848285016132ee565b91505092915050565b6000806000606084860312156134b157600080fd5b60006134bf868287016132d9565b93505060206134d086828701613397565b92505060406134e1868287016132d9565b9150509250925092565b6000806000806040858703121561350157600080fd5b600085013567ffffffffffffffff81111561351b57600080fd5b61352787828801613303565b9450945050602085013567ffffffffffffffff81111561354657600080fd5b6135528782880161334d565b925092505092959194509250565b60006020828403121561357257600080fd5b600061358084828501613397565b91505092915050565b60006020828403121561359b57600080fd5b60006135a9848285016133ac565b91505092915050565b600080604083850312156135c557600080fd5b60006135d385828601613397565b92505060206135e4858286016132d9565b9150509250929050565b6000806000806080858703121561360457600080fd5b600061361287828801613397565b945050602061362387828801613397565b935050604061363487828801613397565b925050606061364587828801613397565b91505092959194509250565b60008060006040848603121561366657600080fd5b600061367486828701613397565b935050602084013567ffffffffffffffff81111561369157600080fd5b61369d868287016133c1565b92509250509250925092565b600080604083850312156136bc57600080fd5b60006136ca85828601613397565b92505060206136db8582860161340b565b9150509250929050565b600080600080600080608087890312156136fe57600080fd5b600061370c89828a01613397565b965050602061371d89828a01613435565b955050604087013567ffffffffffffffff81111561373a57600080fd5b61374689828a016133c1565b9450945050606087013567ffffffffffffffff81111561376557600080fd5b61377189828a016133c1565b92509250509295509295509295565b6000806020838503121561379357600080fd5b600083013567ffffffffffffffff8111156137ad57600080fd5b6137b9858286016133c1565b92509250509250929050565b6000806000604084860312156137da57600080fd5b600084013567ffffffffffffffff8111156137f457600080fd5b613800868287016133c1565b935093505060206138138682870161340b565b9150509250925092565b60006020828403121561382f57600080fd5b600061383d8482850161340b565b91505092915050565b60006020828403121561385857600080fd5b600061386684828501613435565b91505092915050565b60008060006060848603121561388457600080fd5b600061389286828701613435565b93505060206138a386828701613397565b92505060406138b486828701613397565b9150509250925092565b60008060008060008060a087890312156138d757600080fd5b60006138e589828a01613435565b96505060206138f689828a01613435565b955050604061390789828a01613420565b945050606061391889828a01613397565b935050608087013567ffffffffffffffff81111561393557600080fd5b61394189828a016133c1565b92509250509295509295509295565b61395981614cf3565b82525050565b61396881614c25565b82525050565b61397781614c49565b82525050565b61398681614c55565b82525050565b61399d61399882614c55565b614d7d565b82525050565b60006139af8385614bed565b93506139bc838584614d3b565b6139c583614db5565b840190509392505050565b60006139dc8385614bfe565b93506139e9838584614d3b565b82840190509392505050565b6000613a0082614bd7565b613a0a8185614bed565b9350613a1a818560208601614d4a565b613a2381614db5565b840191505092915050565b6000613a3982614bd7565b613a438185614bfe565b9350613a53818560208601614d4a565b80840191505092915050565b6000613a6a82614bcc565b613a748185614bfe565b9350613a84818560208601614d4a565b80840191505092915050565b613a9981614d05565b82525050565b613aa881614d05565b82525050565b6000613ab982614be2565b613ac38185614c09565b9350613ad3818560208601614d4a565b613adc81614db5565b840191505092915050565b6000613af4602283614c09565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613b5a601283614c09565b91507f4e6f7420656e6f756768207369676e65727300000000000000000000000000006000830152602082019050919050565b6000613b9a602f83614c09565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b6000613c00601483614c09565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000613c40601283614c09565b91507f496e76616c6964207265736f75726365494400000000000000000000000000006000830152602082019050919050565b6000613c80600f83614c09565b91507f4e6f7420726567697374657265642100000000000000000000000000000000006000830152602082019050919050565b6000613cc0601683614c09565b91507f496e636f72726563742066656520737570706c696564000000000000000000006000830152602082019050919050565b6000613d00600d83614c09565b91507f4f6e6c79206578656375746f72000000000000000000000000000000000000006000830152602082019050919050565b6000613d40600c83614c09565b91507f4f6e6c792072656c6179657200000000000000000000000000000000000000006000830152602082019050919050565b6000613d80601a83614c09565b91507f50726f706f73616c20616c72656164792063616e63656c6c65640000000000006000830152602082019050919050565b6000613dc0601683614c09565b91507f496e76616c69642061646472657373206c656e677468000000000000000000006000830152602082019050919050565b6000613e00600d83614c09565b91507f416c726561647920766f746564000000000000000000000000000000000000006000830152602082019050919050565b6000613e40600a83614c09565b91507f4f6e6c792061646d696e000000000000000000000000000000000000000000006000830152602082019050919050565b6000613e80601083614c09565b91507f416c7265616479206578656375746564000000000000000000000000000000006000830152602082019050919050565b6000613ec0601383614c09565b91507f416c7265616479207265676973746572656421000000000000000000000000006000830152602082019050919050565b6000613f00603083614c09565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f207265766f6b65000000000000000000000000000000006020830152604082019050919050565b6000613f66600d83614c09565b91507f4e6f7420612072656c61796572000000000000000000000000000000000000006000830152602082019050919050565b6000613fa6602083614c09565b91507f50726f706f73616c206e6f7420617420657870697279207468726573686f6c646000830152602082019050919050565b6000613fe6601083614c09565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000614026601483614c09565b91507f4d61782072656c617965727320726561636865640000000000000000000000006000830152602082019050919050565b6000614066601383614c09565b91507f50726f706f73616c206e6f7420706173736564000000000000000000000000006000830152602082019050919050565b60006140a6600e83614c09565b91507f416c7265616479207369676e65640000000000000000000000000000000000006000830152602082019050919050565b60006140e6601583614c09565b91507f4f6e6c792061646d696e206f722072656c6179657200000000000000000000006000830152602082019050919050565b6000614126601083614c09565b91507f496e76616c6964207369676174757265000000000000000000000000000000006000830152602082019050919050565b6000614166601a83614c09565b91507f50726f706f73616c20616c72656164792070726f6365737365640000000000006000830152602082019050919050565b60006141a6601583614c09565b91507f5265736f757263654944206e6f74206d617070656400000000000000000000006000830152602082019050919050565b60006141e6601f83614c09565b91507f43757272656e742066656520697320657175616c20746f206e657720666565006000830152602082019050919050565b6000614226600c83614c1a565b91507f52454c415945525f524f4c4500000000000000000000000000000000000000006000830152600c82019050919050565b6000614266602f83614c09565b91507f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008301527f20726f6c657320666f722073656c6600000000000000000000000000000000006020830152604082019050919050565b6080820160008201516142d56000850182613a90565b5060208201516142e86020850182614314565b5060408201516142fb604085018261439c565b50606082015161430e6060850182614358565b50505050565b61431d81614c92565b82525050565b61432c81614c92565b82525050565b61433b81614cb7565b82525050565b61435261434d82614cb7565b614d87565b82525050565b61436181614cc1565b82525050565b61437081614cc1565b82525050565b61437f81614cd2565b82525050565b61439661439182614cd2565b614d91565b82525050565b6143a581614ce6565b82525050565b6143b481614ce6565b82525050565b6143cb6143c682614ce6565b614da3565b82525050565b60006143dd828b61398c565b6020820191506143ed828a61398c565b6020820191506143fd8289614341565b60208201915061440d8288614341565b60208201915061441d8287614341565b60208201915061442d8286613a2e565b915061443a8284866139d0565b91508190509998505050505050505050565b60006144598284866139d0565b91508190509392505050565b60006144718287613a2e565b915061447d828661398c565b60208201915061448d828561398c565b60208201915061449d828461398c565b60208201915081905095945050505050565b60006144bb8285613a5f565b91506144c78284613a2e565b91508190509392505050565b60006144de82614219565b9150819050919050565b60006144f48287614341565b6020820191506145048286613a2e565b91506145118284866139d0565b915081905095945050505050565b600061452b82886143ba565b60018201915061453b82876143ba565b60018201915061454b8286614385565b60088201915061455b828561398c565b60208201915061456b8284613a2e565b91508190509695505050505050565b600060208201905061458f600083018461395f565b92915050565b60006020820190506145aa6000830184613950565b92915050565b60006020820190506145c5600083018461396e565b92915050565b60006020820190506145e0600083018461397d565b92915050565b60006040820190506145fb600083018561397d565b614608602083018461395f565b9392505050565b6000606082019050614624600083018761397d565b6146316020830186613950565b81810360408301526146448184866139a3565b905095945050505050565b6000604082019050614664600083018661397d565b81810360208301526146778184866139a3565b9050949350505050565b6000608082019050614696600083018761397d565b6146a360208301866143ab565b6146b0604083018561397d565b6146bd606083018461397d565b95945050505050565b600060a0820190506146db600083018861397d565b6146e860208301876143ab565b6146f56040830186614376565b614702606083018561397d565b818103608083015261471481846139f5565b90509695505050505050565b60006020820190506147356000830184613a9f565b92915050565b60006080820190506147506000830187613a9f565b61475d6020830186614323565b61476a60408301856143ab565b6147776060830184614367565b95945050505050565b6000602082019050818103600083015261479a8184613aae565b905092915050565b600060208201905081810360008301526147bb81613ae7565b9050919050565b600060208201905081810360008301526147db81613b4d565b9050919050565b600060208201905081810360008301526147fb81613b8d565b9050919050565b6000602082019050818103600083015261481b81613bf3565b9050919050565b6000602082019050818103600083015261483b81613c33565b9050919050565b6000602082019050818103600083015261485b81613c73565b9050919050565b6000602082019050818103600083015261487b81613cb3565b9050919050565b6000602082019050818103600083015261489b81613cf3565b9050919050565b600060208201905081810360008301526148bb81613d33565b9050919050565b600060208201905081810360008301526148db81613d73565b9050919050565b600060208201905081810360008301526148fb81613db3565b9050919050565b6000602082019050818103600083015261491b81613df3565b9050919050565b6000602082019050818103600083015261493b81613e33565b9050919050565b6000602082019050818103600083015261495b81613e73565b9050919050565b6000602082019050818103600083015261497b81613eb3565b9050919050565b6000602082019050818103600083015261499b81613ef3565b9050919050565b600060208201905081810360008301526149bb81613f59565b9050919050565b600060208201905081810360008301526149db81613f99565b9050919050565b600060208201905081810360008301526149fb81613fd9565b9050919050565b60006020820190508181036000830152614a1b81614019565b9050919050565b60006020820190508181036000830152614a3b81614059565b9050919050565b60006020820190508181036000830152614a5b81614099565b9050919050565b60006020820190508181036000830152614a7b816140d9565b9050919050565b60006020820190508181036000830152614a9b81614119565b9050919050565b60006020820190508181036000830152614abb81614159565b9050919050565b60006020820190508181036000830152614adb81614199565b9050919050565b60006020820190508181036000830152614afb816141d9565b9050919050565b60006020820190508181036000830152614b1b81614259565b9050919050565b6000608082019050614b3760008301846142bf565b92915050565b6000602082019050614b526000830184614332565b92915050565b6000602082019050614b6d6000830184614376565b92915050565b6000602082019050614b8860008301846143ab565b92915050565b6000606082019050614ba360008301866143ab565b614bb060208301856143ab565b8181036040830152614bc281846139f5565b9050949350505050565b600081519050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000614c3082614c72565b9050919050565b6000614c4282614c72565b9050919050565b60008115159050919050565b6000819050919050565b6000819050614c6d82614de0565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600078ffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000614cfe82614d17565b9050919050565b6000614d1082614c5f565b9050919050565b6000614d2282614d29565b9050919050565b6000614d3482614c72565b9050919050565b82818337600083830152505050565b60005b83811015614d68578082015181840152602081019050614d4d565b83811115614d77576000848401525b50505050565b6000819050919050565b6000819050919050565b6000614d9c82614dc6565b9050919050565b6000614dae82614dd3565b9050919050565b6000601f19601f8301169050919050565b60008160c01b9050919050565b60008160f81b9050919050565b60058110614dea57fe5b50565b614df681614c25565b8114614e0157600080fd5b50565b614e0d81614c37565b8114614e1857600080fd5b50565b614e2481614c55565b8114614e2f57600080fd5b50565b614e3b81614cb7565b8114614e4657600080fd5b50565b614e5281614cd2565b8114614e5d57600080fd5b50565b614e6981614ce6565b8114614e7457600080fd5b5056fea264697066735822122087600b4264d3ba0b54f6531c87b8fc97df2a61e70d53b5fb637c94e4eaa23b9364736f6c63430006040033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, chainID uint8, initialRelayers []common.Address, initialRelayerThreshold *big.Int, fee *big.Int, expiry *big.Int) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, chainID, initialRelayers, initialRelayerThreshold, fee, expiry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bridge.Contract.DEFAULTADMINROLE(&_Bridge.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bridge.Contract.DEFAULTADMINROLE(&_Bridge.CallOpts)
}

// MAXRELAYERS is a free data retrieval call binding the contract method 0x9debb3bd.
//
// Solidity: function MAX_RELAYERS() view returns(uint256)
func (_Bridge *BridgeCaller) MAXRELAYERS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "MAX_RELAYERS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXRELAYERS is a free data retrieval call binding the contract method 0x9debb3bd.
//
// Solidity: function MAX_RELAYERS() view returns(uint256)
func (_Bridge *BridgeSession) MAXRELAYERS() (*big.Int, error) {
	return _Bridge.Contract.MAXRELAYERS(&_Bridge.CallOpts)
}

// MAXRELAYERS is a free data retrieval call binding the contract method 0x9debb3bd.
//
// Solidity: function MAX_RELAYERS() view returns(uint256)
func (_Bridge *BridgeCallerSession) MAXRELAYERS() (*big.Int, error) {
	return _Bridge.Contract.MAXRELAYERS(&_Bridge.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeCaller) RELAYERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "RELAYER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeSession) RELAYERROLE() ([32]byte, error) {
	return _Bridge.Contract.RELAYERROLE(&_Bridge.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeCallerSession) RELAYERROLE() ([32]byte, error) {
	return _Bridge.Contract.RELAYERROLE(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeCaller) ChainID(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_chainID")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeCallerSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 uint8) (uint64, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_depositCounts", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_Bridge *BridgeCaller) Expiry(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_expiry")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_Bridge *BridgeSession) Expiry() (*big.Int, error) {
	return _Bridge.Contract.Expiry(&_Bridge.CallOpts)
}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_Bridge *BridgeCallerSession) Expiry() (*big.Int, error) {
	return _Bridge.Contract.Expiry(&_Bridge.CallOpts)
}

// Fee is a free data retrieval call binding the contract method 0xc5b37c22.
//
// Solidity: function _fee() view returns(uint256)
func (_Bridge *BridgeCaller) Fee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_fee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Fee is a free data retrieval call binding the contract method 0xc5b37c22.
//
// Solidity: function _fee() view returns(uint256)
func (_Bridge *BridgeSession) Fee() (*big.Int, error) {
	return _Bridge.Contract.Fee(&_Bridge.CallOpts)
}

// Fee is a free data retrieval call binding the contract method 0xc5b37c22.
//
// Solidity: function _fee() view returns(uint256)
func (_Bridge *BridgeCallerSession) Fee() (*big.Int, error) {
	return _Bridge.Contract.Fee(&_Bridge.CallOpts)
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x56df07d7.
//
// Solidity: function _hasVotedOnProposal(bytes32 depositKey, address relayer) view returns(bool)
func (_Bridge *BridgeCaller) HasVotedOnProposal(opts *bind.CallOpts, depositKey [32]byte, relayer common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_hasVotedOnProposal", depositKey, relayer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x56df07d7.
//
// Solidity: function _hasVotedOnProposal(bytes32 depositKey, address relayer) view returns(bool)
func (_Bridge *BridgeSession) HasVotedOnProposal(depositKey [32]byte, relayer common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnProposal(&_Bridge.CallOpts, depositKey, relayer)
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x56df07d7.
//
// Solidity: function _hasVotedOnProposal(bytes32 depositKey, address relayer) view returns(bool)
func (_Bridge *BridgeCallerSession) HasVotedOnProposal(depositKey [32]byte, relayer common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnProposal(&_Bridge.CallOpts, depositKey, relayer)
}

// Proposals is a free data retrieval call binding the contract method 0xf2e2af94.
//
// Solidity: function _proposals(bytes32 ) view returns(uint8 _status, uint200 _yesVotes, uint8 _yesVotesTotal, uint40 _proposedBlock)
func (_Bridge *BridgeCaller) Proposals(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Status        uint8
	YesVotes      *big.Int
	YesVotesTotal uint8
	ProposedBlock *big.Int
}, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_proposals", arg0)

	outstruct := new(struct {
		Status        uint8
		YesVotes      *big.Int
		YesVotesTotal uint8
		ProposedBlock *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Status = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.YesVotes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.YesVotesTotal = *abi.ConvertType(out[2], new(uint8)).(*uint8)
	outstruct.ProposedBlock = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Proposals is a free data retrieval call binding the contract method 0xf2e2af94.
//
// Solidity: function _proposals(bytes32 ) view returns(uint8 _status, uint200 _yesVotes, uint8 _yesVotesTotal, uint40 _proposedBlock)
func (_Bridge *BridgeSession) Proposals(arg0 [32]byte) (struct {
	Status        uint8
	YesVotes      *big.Int
	YesVotesTotal uint8
	ProposedBlock *big.Int
}, error) {
	return _Bridge.Contract.Proposals(&_Bridge.CallOpts, arg0)
}

// Proposals is a free data retrieval call binding the contract method 0xf2e2af94.
//
// Solidity: function _proposals(bytes32 ) view returns(uint8 _status, uint200 _yesVotes, uint8 _yesVotesTotal, uint40 _proposedBlock)
func (_Bridge *BridgeCallerSession) Proposals(arg0 [32]byte) (struct {
	Status        uint8
	YesVotes      *big.Int
	YesVotesTotal uint8
	ProposedBlock *big.Int
}, error) {
	return _Bridge.Contract.Proposals(&_Bridge.CallOpts, arg0)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeCaller) RelayerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_relayerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeCallerSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCaller) ResourceIDToHandlerAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_resourceIDToHandlerAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCallerSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// GetDepositKey is a free data retrieval call binding the contract method 0x2c3445a4.
//
// Solidity: function getDepositKey(uint8 originChainID, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data) pure returns(bytes32)
func (_Bridge *BridgeCaller) GetDepositKey(opts *bind.CallOpts, originChainID uint8, destinationChainID uint8, depositNonce uint64, resourceID [32]byte, data []byte) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getDepositKey", originChainID, destinationChainID, depositNonce, resourceID, data)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDepositKey is a free data retrieval call binding the contract method 0x2c3445a4.
//
// Solidity: function getDepositKey(uint8 originChainID, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data) pure returns(bytes32)
func (_Bridge *BridgeSession) GetDepositKey(originChainID uint8, destinationChainID uint8, depositNonce uint64, resourceID [32]byte, data []byte) ([32]byte, error) {
	return _Bridge.Contract.GetDepositKey(&_Bridge.CallOpts, originChainID, destinationChainID, depositNonce, resourceID, data)
}

// GetDepositKey is a free data retrieval call binding the contract method 0x2c3445a4.
//
// Solidity: function getDepositKey(uint8 originChainID, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data) pure returns(bytes32)
func (_Bridge *BridgeCallerSession) GetDepositKey(originChainID uint8, destinationChainID uint8, depositNonce uint64, resourceID [32]byte, data []byte) ([32]byte, error) {
	return _Bridge.Contract.GetDepositKey(&_Bridge.CallOpts, originChainID, destinationChainID, depositNonce, resourceID, data)
}

// GetProposal is a free data retrieval call binding the contract method 0x430694cf.
//
// Solidity: function getProposal(bytes32 depositKey) view returns((uint8,uint200,uint8,uint40))
func (_Bridge *BridgeCaller) GetProposal(opts *bind.CallOpts, depositKey [32]byte) (BridgeProposal, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getProposal", depositKey)

	if err != nil {
		return *new(BridgeProposal), err
	}

	out0 := *abi.ConvertType(out[0], new(BridgeProposal)).(*BridgeProposal)

	return out0, err

}

// GetProposal is a free data retrieval call binding the contract method 0x430694cf.
//
// Solidity: function getProposal(bytes32 depositKey) view returns((uint8,uint200,uint8,uint40))
func (_Bridge *BridgeSession) GetProposal(depositKey [32]byte) (BridgeProposal, error) {
	return _Bridge.Contract.GetProposal(&_Bridge.CallOpts, depositKey)
}

// GetProposal is a free data retrieval call binding the contract method 0x430694cf.
//
// Solidity: function getProposal(bytes32 depositKey) view returns((uint8,uint200,uint8,uint40))
func (_Bridge *BridgeCallerSession) GetProposal(depositKey [32]byte) (BridgeProposal, error) {
	return _Bridge.Contract.GetProposal(&_Bridge.CallOpts, depositKey)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetRoleAdmin(&_Bridge.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetRoleAdmin(&_Bridge.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bridge.Contract.GetRoleMember(&_Bridge.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bridge.Contract.GetRoleMember(&_Bridge.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberCount(&_Bridge.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberCount(&_Bridge.CallOpts, role)
}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeCaller) GetRoleMemberIndex(opts *bind.CallOpts, role [32]byte, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMemberIndex", role, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeSession) GetRoleMemberIndex(role [32]byte, account common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberIndex(&_Bridge.CallOpts, role, account)
}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetRoleMemberIndex(role [32]byte, account common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberIndex(&_Bridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bridge.Contract.HasRole(&_Bridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bridge.Contract.HasRole(&_Bridge.CallOpts, role, account)
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeCaller) IsRelayer(opts *bind.CallOpts, relayer common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isRelayer", relayer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeSession) IsRelayer(relayer common.Address) (bool, error) {
	return _Bridge.Contract.IsRelayer(&_Bridge.CallOpts, relayer)
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeCallerSession) IsRelayer(relayer common.Address) (bool, error) {
	return _Bridge.Contract.IsRelayer(&_Bridge.CallOpts, relayer)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCallerSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactor) AdminAddRelayer(opts *bind.TransactOpts, relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminAddRelayer", relayerAddress)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeSession) AdminAddRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminAddRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminAddRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminAddRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminChangeFee is a paid mutator transaction binding the contract method 0x91c404ac.
//
// Solidity: function adminChangeFee(uint256 newFee) returns()
func (_Bridge *BridgeTransactor) AdminChangeFee(opts *bind.TransactOpts, newFee *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeFee", newFee)
}

// AdminChangeFee is a paid mutator transaction binding the contract method 0x91c404ac.
//
// Solidity: function adminChangeFee(uint256 newFee) returns()
func (_Bridge *BridgeSession) AdminChangeFee(newFee *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFee(&_Bridge.TransactOpts, newFee)
}

// AdminChangeFee is a paid mutator transaction binding the contract method 0x91c404ac.
//
// Solidity: function adminChangeFee(uint256 newFee) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeFee(newFee *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFee(&_Bridge.TransactOpts, newFee)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeTransactor) AdminChangeRelayerThreshold(opts *bind.TransactOpts, newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeRelayerThreshold", newThreshold)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeSession) AdminChangeRelayerThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeRelayerThreshold(&_Bridge.TransactOpts, newThreshold)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeRelayerThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeRelayerThreshold(&_Bridge.TransactOpts, newThreshold)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminPauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminPauseTransfers")
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminRelease is a paid mutator transaction binding the contract method 0x4713651d.
//
// Solidity: function adminRelease(bytes32 resourceID, bytes data) returns()
func (_Bridge *BridgeTransactor) AdminRelease(opts *bind.TransactOpts, resourceID [32]byte, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminRelease", resourceID, data)
}

// AdminRelease is a paid mutator transaction binding the contract method 0x4713651d.
//
// Solidity: function adminRelease(bytes32 resourceID, bytes data) returns()
func (_Bridge *BridgeSession) AdminRelease(resourceID [32]byte, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRelease(&_Bridge.TransactOpts, resourceID, data)
}

// AdminRelease is a paid mutator transaction binding the contract method 0x4713651d.
//
// Solidity: function adminRelease(bytes32 resourceID, bytes data) returns()
func (_Bridge *BridgeTransactorSession) AdminRelease(resourceID [32]byte, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRelease(&_Bridge.TransactOpts, resourceID, data)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactor) AdminRemoveRelayer(opts *bind.TransactOpts, relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminRemoveRelayer", relayerAddress)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeSession) AdminRemoveRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRemoveRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminRemoveRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRemoveRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x390ba7f8.
//
// Solidity: function adminSetBurnable(bytes32 resourceID) returns()
func (_Bridge *BridgeTransactor) AdminSetBurnable(opts *bind.TransactOpts, resourceID [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetBurnable", resourceID)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x390ba7f8.
//
// Solidity: function adminSetBurnable(bytes32 resourceID) returns()
func (_Bridge *BridgeSession) AdminSetBurnable(resourceID [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, resourceID)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x390ba7f8.
//
// Solidity: function adminSetBurnable(bytes32 resourceID) returns()
func (_Bridge *BridgeTransactorSession) AdminSetBurnable(resourceID [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, resourceID)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetResource(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetResource", handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminUnpauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminUnpauseTransfers")
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x37376ca8.
//
// Solidity: function cancelProposal(bytes32 depositKey) returns()
func (_Bridge *BridgeTransactor) CancelProposal(opts *bind.TransactOpts, depositKey [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "cancelProposal", depositKey)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x37376ca8.
//
// Solidity: function cancelProposal(bytes32 depositKey) returns()
func (_Bridge *BridgeSession) CancelProposal(depositKey [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.CancelProposal(&_Bridge.TransactOpts, depositKey)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x37376ca8.
//
// Solidity: function cancelProposal(bytes32 depositKey) returns()
func (_Bridge *BridgeTransactorSession) CancelProposal(depositKey [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.CancelProposal(&_Bridge.TransactOpts, depositKey)
}

// Deposit is a paid mutator transaction binding the contract method 0xd1cafc08.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, bytes executor, bytes data) payable returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, resourceID [32]byte, destinationChainID uint8, executor []byte, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", resourceID, destinationChainID, executor, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xd1cafc08.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, bytes executor, bytes data) payable returns()
func (_Bridge *BridgeSession) Deposit(resourceID [32]byte, destinationChainID uint8, executor []byte, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, resourceID, destinationChainID, executor, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xd1cafc08.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, bytes executor, bytes data) payable returns()
func (_Bridge *BridgeTransactorSession) Deposit(resourceID [32]byte, destinationChainID uint8, executor []byte, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, resourceID, destinationChainID, executor, data)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x9298e2d1.
//
// Solidity: function executeMessage(bytes data, uint256 adminNoThreshold) returns()
func (_Bridge *BridgeTransactor) ExecuteMessage(opts *bind.TransactOpts, data []byte, adminNoThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeMessage", data, adminNoThreshold)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x9298e2d1.
//
// Solidity: function executeMessage(bytes data, uint256 adminNoThreshold) returns()
func (_Bridge *BridgeSession) ExecuteMessage(data []byte, adminNoThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteMessage(&_Bridge.TransactOpts, data, adminNoThreshold)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x9298e2d1.
//
// Solidity: function executeMessage(bytes data, uint256 adminNoThreshold) returns()
func (_Bridge *BridgeTransactorSession) ExecuteMessage(data []byte, adminNoThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteMessage(&_Bridge.TransactOpts, data, adminNoThreshold)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x30faa259.
//
// Solidity: function executeProposal(bytes data) returns()
func (_Bridge *BridgeTransactor) ExecuteProposal(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeProposal", data)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x30faa259.
//
// Solidity: function executeProposal(bytes data) returns()
func (_Bridge *BridgeSession) ExecuteProposal(data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, data)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x30faa259.
//
// Solidity: function executeProposal(bytes data) returns()
func (_Bridge *BridgeTransactorSession) ExecuteProposal(data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.GrantRole(&_Bridge.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.GrantRole(&_Bridge.TransactOpts, role, account)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeTransactor) RenounceAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceAdmin", newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceAdmin(&_Bridge.TransactOpts, newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeTransactorSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceAdmin(&_Bridge.TransactOpts, newAdmin)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceRole(&_Bridge.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceRole(&_Bridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RevokeRole(&_Bridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RevokeRole(&_Bridge.TransactOpts, role, account)
}

// TransferFunds is a paid mutator transaction binding the contract method 0x4603ae38.
//
// Solidity: function transferFunds(address[] addrs, uint256[] amounts) returns()
func (_Bridge *BridgeTransactor) TransferFunds(opts *bind.TransactOpts, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferFunds", addrs, amounts)
}

// TransferFunds is a paid mutator transaction binding the contract method 0x4603ae38.
//
// Solidity: function transferFunds(address[] addrs, uint256[] amounts) returns()
func (_Bridge *BridgeSession) TransferFunds(addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransferFunds(&_Bridge.TransactOpts, addrs, amounts)
}

// TransferFunds is a paid mutator transaction binding the contract method 0x4603ae38.
//
// Solidity: function transferFunds(address[] addrs, uint256[] amounts) returns()
func (_Bridge *BridgeTransactorSession) TransferFunds(addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransferFunds(&_Bridge.TransactOpts, addrs, amounts)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x03047f15.
//
// Solidity: function voteProposal(bytes32 depositKey, bytes32 v, bytes32 r, bytes32 s) returns()
func (_Bridge *BridgeTransactor) VoteProposal(opts *bind.TransactOpts, depositKey [32]byte, v [32]byte, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteProposal", depositKey, v, r, s)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x03047f15.
//
// Solidity: function voteProposal(bytes32 depositKey, bytes32 v, bytes32 r, bytes32 s) returns()
func (_Bridge *BridgeSession) VoteProposal(depositKey [32]byte, v [32]byte, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteProposal(&_Bridge.TransactOpts, depositKey, v, r, s)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x03047f15.
//
// Solidity: function voteProposal(bytes32 depositKey, bytes32 v, bytes32 r, bytes32 s) returns()
func (_Bridge *BridgeTransactorSession) VoteProposal(depositKey [32]byte, v [32]byte, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteProposal(&_Bridge.TransactOpts, depositKey, v, r, s)
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	Executor           [32]byte
	DepositKey         [32]byte
	DestinationChainID uint8
	DepositNonce       uint64
	ResourceID         [32]byte
	Data               []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xfd57dc9ac10b00003f5a7c4782aa72f948a333affbe4e85c2ffb1937e5403736.
//
// Solidity: event Deposit(bytes32 indexed executor, bytes32 depositKey, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, executor [][32]byte) (*BridgeDepositIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", executorRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xfd57dc9ac10b00003f5a7c4782aa72f948a333affbe4e85c2ffb1937e5403736.
//
// Solidity: event Deposit(bytes32 indexed executor, bytes32 depositKey, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, executor [][32]byte) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xfd57dc9ac10b00003f5a7c4782aa72f948a333affbe4e85c2ffb1937e5403736.
//
// Solidity: event Deposit(bytes32 indexed executor, bytes32 depositKey, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeExecuteIterator is returned from FilterExecute and is used to iterate over the raw logs and unpacked data for Execute events raised by the Bridge contract.
type BridgeExecuteIterator struct {
	Event *BridgeExecute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeExecuteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeExecute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeExecute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeExecuteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeExecuteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeExecute represents a Execute event raised by the Bridge contract.
type BridgeExecute struct {
	Executor           [32]byte
	DepositKey         [32]byte
	OriginChainID      uint8
	DestinationChainID uint8
	Data               []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterExecute is a free log retrieval operation binding the contract event 0xc1e49ae204831e426585ee37d419d260ebc28b2c7a214c549909753eb515c6b4.
//
// Solidity: event Execute(bytes32 indexed executor, bytes32 indexed depositKey, uint8 originChainID, uint8 destinationChainID, bytes data)
func (_Bridge *BridgeFilterer) FilterExecute(opts *bind.FilterOpts, executor [][32]byte, depositKey [][32]byte) (*BridgeExecuteIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}
	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Execute", executorRule, depositKeyRule)
	if err != nil {
		return nil, err
	}
	return &BridgeExecuteIterator{contract: _Bridge.contract, event: "Execute", logs: logs, sub: sub}, nil
}

// WatchExecute is a free log subscription operation binding the contract event 0xc1e49ae204831e426585ee37d419d260ebc28b2c7a214c549909753eb515c6b4.
//
// Solidity: event Execute(bytes32 indexed executor, bytes32 indexed depositKey, uint8 originChainID, uint8 destinationChainID, bytes data)
func (_Bridge *BridgeFilterer) WatchExecute(opts *bind.WatchOpts, sink chan<- *BridgeExecute, executor [][32]byte, depositKey [][32]byte) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}
	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Execute", executorRule, depositKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeExecute)
				if err := _Bridge.contract.UnpackLog(event, "Execute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecute is a log parse operation binding the contract event 0xc1e49ae204831e426585ee37d419d260ebc28b2c7a214c549909753eb515c6b4.
//
// Solidity: event Execute(bytes32 indexed executor, bytes32 indexed depositKey, uint8 originChainID, uint8 destinationChainID, bytes data)
func (_Bridge *BridgeFilterer) ParseExecute(log types.Log) (*BridgeExecute, error) {
	event := new(BridgeExecute)
	if err := _Bridge.contract.UnpackLog(event, "Execute", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Bridge contract.
type BridgePausedIterator struct {
	Event *BridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgePaused represents a Paused event raised by the Bridge contract.
type BridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*BridgePausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BridgePausedIterator{contract: _Bridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BridgePaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgePaused)
				if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) ParsePaused(log types.Log) (*BridgePaused, error) {
	event := new(BridgePaused)
	if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeProposalEventIterator is returned from FilterProposalEvent and is used to iterate over the raw logs and unpacked data for ProposalEvent events raised by the Bridge contract.
type BridgeProposalEventIterator struct {
	Event *BridgeProposalEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalEvent represents a ProposalEvent event raised by the Bridge contract.
type BridgeProposalEvent struct {
	DepositKey [32]byte
	Status     uint8
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalEvent is a free log retrieval operation binding the contract event 0xe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e.
//
// Solidity: event ProposalEvent(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) FilterProposalEvent(opts *bind.FilterOpts, depositKey [][32]byte) (*BridgeProposalEventIterator, error) {

	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalEvent", depositKeyRule)
	if err != nil {
		return nil, err
	}
	return &BridgeProposalEventIterator{contract: _Bridge.contract, event: "ProposalEvent", logs: logs, sub: sub}, nil
}

// WatchProposalEvent is a free log subscription operation binding the contract event 0xe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e.
//
// Solidity: event ProposalEvent(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) WatchProposalEvent(opts *bind.WatchOpts, sink chan<- *BridgeProposalEvent, depositKey [][32]byte) (event.Subscription, error) {

	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalEvent", depositKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalEvent)
				if err := _Bridge.contract.UnpackLog(event, "ProposalEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalEvent is a log parse operation binding the contract event 0xe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e.
//
// Solidity: event ProposalEvent(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) ParseProposalEvent(log types.Log) (*BridgeProposalEvent, error) {
	event := new(BridgeProposalEvent)
	if err := _Bridge.contract.UnpackLog(event, "ProposalEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeProposalVoteIterator is returned from FilterProposalVote and is used to iterate over the raw logs and unpacked data for ProposalVote events raised by the Bridge contract.
type BridgeProposalVoteIterator struct {
	Event *BridgeProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalVote represents a ProposalVote event raised by the Bridge contract.
type BridgeProposalVote struct {
	DepositKey [32]byte
	Status     uint8
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalVote is a free log retrieval operation binding the contract event 0x8e39a8cb5a95479e706618eec60583b10090b821ced6a7a4c125b85a9a7724c8.
//
// Solidity: event ProposalVote(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) FilterProposalVote(opts *bind.FilterOpts, depositKey [][32]byte) (*BridgeProposalVoteIterator, error) {

	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalVote", depositKeyRule)
	if err != nil {
		return nil, err
	}
	return &BridgeProposalVoteIterator{contract: _Bridge.contract, event: "ProposalVote", logs: logs, sub: sub}, nil
}

// WatchProposalVote is a free log subscription operation binding the contract event 0x8e39a8cb5a95479e706618eec60583b10090b821ced6a7a4c125b85a9a7724c8.
//
// Solidity: event ProposalVote(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) WatchProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeProposalVote, depositKey [][32]byte) (event.Subscription, error) {

	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalVote", depositKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "ProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalVote is a log parse operation binding the contract event 0x8e39a8cb5a95479e706618eec60583b10090b821ced6a7a4c125b85a9a7724c8.
//
// Solidity: event ProposalVote(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) ParseProposalVote(log types.Log) (*BridgeProposalVote, error) {
	event := new(BridgeProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "ProposalVote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRelayerAddedIterator is returned from FilterRelayerAdded and is used to iterate over the raw logs and unpacked data for RelayerAdded events raised by the Bridge contract.
type BridgeRelayerAddedIterator struct {
	Event *BridgeRelayerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerAdded represents a RelayerAdded event raised by the Bridge contract.
type BridgeRelayerAdded struct {
	Relayer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRelayerAdded is a free log retrieval operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) FilterRelayerAdded(opts *bind.FilterOpts, relayer []common.Address) (*BridgeRelayerAddedIterator, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerAdded", relayerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerAddedIterator{contract: _Bridge.contract, event: "RelayerAdded", logs: logs, sub: sub}, nil
}

// WatchRelayerAdded is a free log subscription operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) WatchRelayerAdded(opts *bind.WatchOpts, sink chan<- *BridgeRelayerAdded, relayer []common.Address) (event.Subscription, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerAdded", relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerAdded)
				if err := _Bridge.contract.UnpackLog(event, "RelayerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerAdded is a log parse operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) ParseRelayerAdded(log types.Log) (*BridgeRelayerAdded, error) {
	event := new(BridgeRelayerAdded)
	if err := _Bridge.contract.UnpackLog(event, "RelayerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRelayerRemovedIterator is returned from FilterRelayerRemoved and is used to iterate over the raw logs and unpacked data for RelayerRemoved events raised by the Bridge contract.
type BridgeRelayerRemovedIterator struct {
	Event *BridgeRelayerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerRemoved represents a RelayerRemoved event raised by the Bridge contract.
type BridgeRelayerRemoved struct {
	Relayer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRelayerRemoved is a free log retrieval operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) FilterRelayerRemoved(opts *bind.FilterOpts, relayer []common.Address) (*BridgeRelayerRemovedIterator, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerRemoved", relayerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerRemovedIterator{contract: _Bridge.contract, event: "RelayerRemoved", logs: logs, sub: sub}, nil
}

// WatchRelayerRemoved is a free log subscription operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) WatchRelayerRemoved(opts *bind.WatchOpts, sink chan<- *BridgeRelayerRemoved, relayer []common.Address) (event.Subscription, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerRemoved", relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerRemoved)
				if err := _Bridge.contract.UnpackLog(event, "RelayerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerRemoved is a log parse operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) ParseRelayerRemoved(log types.Log) (*BridgeRelayerRemoved, error) {
	event := new(BridgeRelayerRemoved)
	if err := _Bridge.contract.UnpackLog(event, "RelayerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRelayerThresholdChangedIterator is returned from FilterRelayerThresholdChanged and is used to iterate over the raw logs and unpacked data for RelayerThresholdChanged events raised by the Bridge contract.
type BridgeRelayerThresholdChangedIterator struct {
	Event *BridgeRelayerThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdChanged represents a RelayerThresholdChanged event raised by the Bridge contract.
type BridgeRelayerThresholdChanged struct {
	NewThreshold *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdChanged is a free log retrieval operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdChanged(opts *bind.FilterOpts, newThreshold []*big.Int) (*BridgeRelayerThresholdChangedIterator, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdChangedIterator{contract: _Bridge.contract, event: "RelayerThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdChanged is a free log subscription operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdChanged(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdChanged, newThreshold []*big.Int) (event.Subscription, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdChanged)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdChanged is a log parse operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdChanged(log types.Log) (*BridgeRelayerThresholdChanged, error) {
	event := new(BridgeRelayerThresholdChanged)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Bridge contract.
type BridgeRoleGrantedIterator struct {
	Event *BridgeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRoleGranted represents a RoleGranted event raised by the Bridge contract.
type BridgeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRoleGrantedIterator{contract: _Bridge.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BridgeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRoleGranted)
				if err := _Bridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) ParseRoleGranted(log types.Log) (*BridgeRoleGranted, error) {
	event := new(BridgeRoleGranted)
	if err := _Bridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Bridge contract.
type BridgeRoleRevokedIterator struct {
	Event *BridgeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRoleRevoked represents a RoleRevoked event raised by the Bridge contract.
type BridgeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRoleRevokedIterator{contract: _Bridge.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BridgeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRoleRevoked)
				if err := _Bridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) ParseRoleRevoked(log types.Log) (*BridgeRoleRevoked, error) {
	event := new(BridgeRoleRevoked)
	if err := _Bridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Bridge contract.
type BridgeUnpausedIterator struct {
	Event *BridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnpaused represents a Unpaused event raised by the Bridge contract.
type BridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BridgeUnpausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BridgeUnpausedIterator{contract: _Bridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnpaused)
				if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) ParseUnpaused(log types.Log) (*BridgeUnpaused, error) {
	event := new(BridgeUnpaused)
	if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
