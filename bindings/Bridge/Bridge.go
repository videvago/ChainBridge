// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeProposal struct {
	Status        uint8
	YesVotes      *big.Int
	YesVotesTotal uint8
	ProposedBlock *big.Int
}

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"executor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"executor\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ProposalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RELAYERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"enumBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint200\",\"name\":\"_yesVotes\",\"type\":\"uint200\"},{\"internalType\":\"uint8\",\"name\":\"_yesVotesTotal\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"_proposedBlock\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoleMemberIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"_hasVotedOnProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getDepositKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"enumBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint200\",\"name\":\"_yesVotes\",\"type\":\"uint200\"},{\"internalType\":\"uint8\",\"name\":\"_yesVotesTotal\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"_proposedBlock\",\"type\":\"uint40\"}],\"internalType\":\"structBridge.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getMessageExecutionState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"states\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"adminChangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"executor\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"v\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositKey\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"adminNoThreshold\",\"type\":\"uint256\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x608060405260008060006101000a81548160ff02191690831515021790555061540d8061002d6000396000f3fe6080604052600436106102465760003560e01c806384db809f11610139578063beab7131116100b6578063cdb0f73a1161007a578063cdb0f73a146108d2578063d1cafc08146108fb578063d547741f14610917578063d7a9cd7914610940578063f2e2af941461096b578063ffaac0eb146109ab57610246565b8063beab7131146107eb578063c5b37c2214610816578063c5ec897014610841578063ca15c8731461086c578063cb10f215146108a957610246565b80639298e2d1116100fd5780639298e2d11461071a5780639d82dd63146107435780639debb3bd1461076c578063a217fddf14610797578063aa4304a4146107c257610246565b806384db809f1461060f5780639010d07c1461064c57806391c404ac1461068957806391d14854146106b2578063926d7d7f146106ef57610246565b80634603ae38116101c7578063541d55481161018b578063541d55481461052a57806356df07d7146105675780635c975abb146105a45780635e1fab0f146105cf57806380ae1c28146105f857610246565b80634603ae38146104355780634713651d1461045e5780634b0b919d146104875780634e056005146104c45780634e0df3f6146104ed57610246565b806330faa2591161020e57806330faa2591461035457806336568abe1461037d57806337376ca8146103a6578063390ba7f8146103cf578063430694cf146103f857610246565b806303047f151461024b57806320bbad7014610274578063248a9ca3146102b15780632c3445a4146102ee5780632f2ff15d1461032b575b600080fd5b34801561025757600080fd5b50610272600480360381019061026d919061397c565b6109c2565b005b34801561028057600080fd5b5061029b600480360381019061029691906138a9565b610f59565b6040516102a89190614a95565b60405180910390f35b3480156102bd57600080fd5b506102d860048036038101906102d391906138ee565b610ff1565b6040516102e59190614ad2565b60405180910390f35b3480156102fa57600080fd5b5061031560048036038101906103109190613cde565b611011565b6040516103229190614ad2565b60405180910390f35b34801561033757600080fd5b50610352600480360381019061034d9190613940565b611070565b005b34801561036057600080fd5b5061037b60048036038101906103769190613b0e565b6110e4565b005b34801561038957600080fd5b506103a4600480360381019061039f9190613940565b611456565b005b3480156103b257600080fd5b506103cd60048036038101906103c891906138ee565b6114d9565b005b3480156103db57600080fd5b506103f660048036038101906103f191906138ee565b61162e565b005b34801561040457600080fd5b5061041f600480360381019061041a91906138ee565b61174d565b60405161042c9190615049565b60405180910390f35b34801561044157600080fd5b5061045c60048036038101906104579190613834565b611852565b005b34801561046a57600080fd5b50610485600480360381019061048091906139df565b6118f8565b005b34801561049357600080fd5b506104ae60048036038101906104a99190613bd4565b611a1d565b6040516104bb919061507f565b60405180910390f35b3480156104d057600080fd5b506104eb60048036038101906104e69190613bab565b611a44565b005b3480156104f957600080fd5b50610514600480360381019061050f9190613940565b611a83565b6040516105219190615064565b60405180910390f35b34801561053657600080fd5b50610551600480360381019061054c9190613793565b611ad4565b60405161055e9190614ab7565b60405180910390f35b34801561057357600080fd5b5061058e60048036038101906105899190613940565b611afa565b60405161059b9190614ab7565b60405180910390f35b3480156105b057600080fd5b506105b9611c03565b6040516105c69190614ab7565b60405180910390f35b3480156105db57600080fd5b506105f660048036038101906105f19190613793565b611c19565b005b34801561060457600080fd5b5061060d611c3e565b005b34801561061b57600080fd5b50610636600480360381019061063191906138ee565b611c50565b6040516106439190614a5f565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190613a37565b611c83565b6040516106809190614a5f565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab9190613bab565b611cb5565b005b3480156106be57600080fd5b506106d960048036038101906106d49190613940565b611d0c565b6040516106e69190614ab7565b60405180910390f35b3480156106fb57600080fd5b50610704611d3e565b6040516107119190614ad2565b60405180910390f35b34801561072657600080fd5b50610741600480360381019061073c9190613b53565b611d55565b005b34801561074f57600080fd5b5061076a60048036038101906107659190613793565b612450565b005b34801561077857600080fd5b5061078161250f565b60405161078e9190615064565b60405180910390f35b3480156107a357600080fd5b506107ac612514565b6040516107b99190614ad2565b60405180910390f35b3480156107ce57600080fd5b506107e960048036038101906107e49190613bfd565b61251b565b005b3480156107f757600080fd5b5061080061262e565b60405161080d919061509a565b60405180910390f35b34801561082257600080fd5b5061082b612641565b6040516108389190615064565b60405180910390f35b34801561084d57600080fd5b50610856612647565b6040516108639190615064565b60405180910390f35b34801561087857600080fd5b50610893600480360381019061088e91906138ee565b61264d565b6040516108a09190615064565b60405180910390f35b3480156108b557600080fd5b506108d060048036038101906108cb91906137e5565b612674565b005b3480156108de57600080fd5b506108f960048036038101906108f49190613793565b612740565b005b61091560048036038101906109109190613a73565b61285e565b005b34801561092357600080fd5b5061093e60048036038101906109399190613940565b612bfa565b005b34801561094c57600080fd5b50610955612c6e565b6040516109629190615064565b60405180910390f35b34801561097757600080fd5b50610992600480360381019061098d91906138ee565b612c74565b6040516109a29493929190614c42565b60405180910390f35b3480156109b757600080fd5b506109c0612cf4565b005b6109ca612d06565b6109d2612d64565b6109da6134db565b600860008681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166004811115610a1657fe5b6004811115610a2157fe5b81526020016000820160019054906101000a900478ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff16815260200160008201601a9054906101000a900460ff1660ff1660ff16815260200160008201601b9054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681525050905060016004811115610adf57fe5b81600001516004811115610aef57fe5b1115610b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2790614fa9565b60405180910390fd5b610b3a8133612db5565b15610b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7190614e09565b60405180910390fd5b60006004811115610b8757fe5b81600001516004811115610b9757fe5b1415610c3157604051806080016040528060016004811115610bb557fe5b8152602001600078ffffffffffffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681526020014364ffffffffff168152509050847fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e6001604051610c249190614c27565b60405180910390a2610cb4565b600554610c4943836060015164ffffffffff16612deb565b64ffffffffff161115610cb357600481600001906004811115610c6857fe5b90816004811115610c7557fe5b81525050847fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e6004604051610caa9190614c27565b60405180910390a25b5b600480811115610cc057fe5b81600001516004811115610cd057fe5b14610e7757610cde33612e35565b816020015178ffffffffffffffffffffffffffffffffffffffffffffffffff1617816020019078ffffffffffffffffffffffffffffffffffffffffffffffffff16908178ffffffffffffffffffffffffffffffffffffffffffffffffff168152505080604001805180919060010160ff1660ff16815250506009600086815260200190815260200160002060405180606001604052808681526020018581526020018481525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010155604082015181600201555050847f8e39a8cb5a95479e706618eec60583b10090b821ced6a7a4c125b85a9a7724c88260000151604051610e019190614c27565b60405180910390a2600354816040015160ff1610610e7657600281600001906004811115610e2b57fe5b90816004811115610e3857fe5b81525050847fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e6002604051610e6d9190614c27565b60405180910390a25b5b806008600087815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115610eaf57fe5b021790555060208201518160000160016101000a81548178ffffffffffffffffffffffffffffffffffffffffffffffffff021916908378ffffffffffffffffffffffffffffffffffffffffffffffffff160217905550604082015181600001601a6101000a81548160ff021916908360ff160217905550606082015181600001601b6101000a81548164ffffffffff021916908364ffffffffff1602179055509050505050505050565b606082829050604051908082528060200260200182016040528015610f8d5781602001602082028036833780820191505090505b50905060008090505b83839050811015610fea57600a6000858584818110610fb157fe5b90506020020135815260200190815260200160002054828281518110610fd357fe5b602002602001018181525050806001019050610f96565b5092915050565b600060016000838152602001908152602001600020600201549050919050565b60006110648787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612e69565b90509695505050505050565b6110976001600084815260200190815260200160002060020154611092612ea5565b611d0c565b6110d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cd90614ce9565b60405180910390fd5b6110e08282612ead565b5050565b6110ec612d06565b6110f4612d64565b60008282600060208082111561110957600080fd5b8281111561111657600080fd5b60018202840193508181039250505081019061113291906138ee565b905060006008600083815260200190815260200160002090506002600481111561115857fe5b8160000160009054906101000a900460ff16600481111561117557fe5b146111b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ac90614f29565b60405180910390fd5b60038160000160006101000a81548160ff021916908360048111156111d657fe5b0217905550817fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e8260000160009054906101000a900460ff1660405161121c9190614c27565b60405180910390a250606060006040519080825280601f01601f19166020018201604052801561125b5781602001600182028036833780820191505090505b509050600060096000848152602001908152602001600020905060008090505b8180549050811015611311578282828154811061129457fe5b9060005260206000209060030201600001548383815481106112b257fe5b9060005260206000209060030201600101548484815481106112d057fe5b9060005260206000209060030201600201546040516020016112f5949392919061494a565b604051602081830303815290604052925080600101905061127b565b506009600084815260200190815260200160002060006113319190613533565b5081848460a060c08082111561134657600080fd5b8281111561135357600080fd5b60018202840193508181039250505081019061136f91906138ee565b7fc1e49ae204831e426585ee37d419d260ebc28b2c7a214c549909753eb515c6b4868660406060808211156113a357600080fd5b828111156113b057600080fd5b6001820284019350818103925050508101906113cc9190613bab565b878760606080808211156113df57600080fd5b828111156113ec57600080fd5b6001820284019350818103925050508101906114089190613bab565b606086518161141357fe5b04868a8a60405160200161142a94939291906149cd565b604051602081830303815290604052604051611448939291906150b5565b60405180910390a350505050565b61145e612ea5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c290615029565b60405180910390fd5b6114d58282612f41565b5050565b6114e1612fd5565b600060086000838152602001908152602001600020905060048081111561150457fe5b8160000160009054906101000a900460ff16600481111561152157fe5b1415611562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155990614dc9565b60405180910390fd5b60055461158b4383600001601b9054906101000a900464ffffffffff1664ffffffffff16612deb565b116115cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c290614ec9565b60405180910390fd5b60048160000160006101000a81548160ff021916908360048111156115ec57fe5b0217905550817fe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e60046040516116229190614c27565b60405180910390a25050565b611636613047565b60006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d590614d29565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166389aa2453836040518263ffffffff1660e01b81526004016117179190614ad2565b600060405180830381600087803b15801561173157600080fd5b505af1158015611745573d6000803e3d6000fd5b505050505050565b6117556134db565b600860008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16600481111561179157fe5b600481111561179c57fe5b81526020016000820160019054906101000a900478ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff16815260200160008201601a9054906101000a900460ff1660ff1660ff16815260200160008201601b9054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815250509050919050565b61185a613047565b60008090505b848490508110156118f15784848281811061187757fe5b905060200201602081019061188c91906137bc565b73ffffffffffffffffffffffffffffffffffffffff166108fc8484848181106118b157fe5b905060200201359081150290604051600060405180830381858888f193505050501580156118e3573d6000803e3d6000fd5b508080600101915050611860565b5050505050565b611900613047565b60006007600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199f90614d29565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16631bc8a4668585856040518463ffffffff1660e01b81526004016119e593929190614b56565b600060405180830381600087803b1580156119ff57600080fd5b505af1158015611a13573d6000803e3d6000fd5b5050505050505050565b60066020528060005260406000206000915054906101000a900467ffffffffffffffff1681565b611a4c613047565b80600381905550807fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a250565b60006001600084815260200190815260200160002060000160000160010160008373ffffffffffffffffffffffffffffffffffffffff1660001b815260200190815260200160002054905092915050565b6000611af3604051611ae5906149b8565b604051809103902083611d0c565b9050919050565b6000611bfb600860008581526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff166004811115611b3b57fe5b6004811115611b4657fe5b81526020016000820160019054906101000a900478ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff1678ffffffffffffffffffffffffffffffffffffffffffffffffff16815260200160008201601a9054906101000a900460ff1660ff1660ff16815260200160008201601b9054906101000a900464ffffffffff1664ffffffffff1664ffffffffff168152505083612db5565b905092915050565b60008060009054906101000a900460ff16905090565b611c21613047565b611c2e6000801b82611070565b611c3b6000801b33611456565b50565b611c46613047565b611c4e613095565b565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611cad82600160008681526020019081526020016000206000016130f090919063ffffffff16565b905092915050565b611cbd613047565b806004541415611d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf990615009565b60405180910390fd5b8060048190555050565b6000611d36826001600086815260200190815260200160002060000161310a90919063ffffffff16565b905092915050565b604051611d4a906149b8565b604051809103902081565b611d5d612d64565b600060209050600084846000602080821115611d7857600080fd5b82811115611d8557600080fd5b600182028401935081810392505050810190611da19190613bab565b90506000831115611db957611db4613047565b611dff565b600354811015611dfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df590614cc9565b60405180910390fd5b5b60008585606084026020018180821115611e1857600080fd5b82811115611e2557600080fd5b600182028401935081810392505050604051611e42929190614931565b60405180910390209050600080905060008090505b838110156120285760008060008a8a8960608b0180821115611e7857600080fd5b82811115611e8557600080fd5b600182028401935081810392505050810190611ea19190613c8f565b925092509250601b8360ff161015611eba57601b830192505b601b8360ff161480611ecf5750601c8360ff16145b611f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0590614f89565b60405180910390fd5b600060018785858560405160008152602001604052604051611f339493929190614b88565b6020604051602081039080840390855afa158015611f55573d6000803e3d6000fd5b505050602060405103519050611f7e604051611f70906149b8565b604051809103902082611d0c565b611fbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb490614ea9565b60405180910390fd5b6000869050611fcb82612e35565b8717965086811415612012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200990614f49565b60405180910390fd5b60608a0199505050505050806001019050611e57565b505050506000848483602085018082111561204257600080fd5b8281111561204f57600080fd5b60018202840193508181039250505081019061206b91906138ee565b90506000600a600083815260200190815260200160002054146120c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ba90614e49565b60405180910390fd5b6001600a600083815260200190815260200160002081905550803373ffffffffffffffffffffffffffffffffffffffff167f71ed0a768275994af299aae0bbf451857ec497f011f4efb5d42d76a1075b461b60405160405180910390a3506000848460608401608085018082111561213a57600080fd5b8281111561214757600080fd5b6001820284019350818103925050508101906121639190613bab565b9050600260009054906101000a900460ff1660ff16811461218357600080fd5b600085856080850160a086018082111561219c57600080fd5b828111156121a957600080fd5b6001820284019350818103925050508101906121c59190613bab565b90506014811461220a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220190614de9565b60405180910390fd5b6000868660a0860160c087018082111561222357600080fd5b8281111561223057600080fd5b60018202840193508181039250505081019061224c91906137bc565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146122bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b390614d89565b60405180910390fd5b505050600084846020840160408501808211156122d857600080fd5b828111156122e557600080fd5b60018202840193508181039250505081019061230191906138ee565b905060006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a290614fc9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e248cff283888860c0880181808211156123dc57600080fd5b828111156123e957600080fd5b6001820284019350818103925050506040518463ffffffff1660e01b815260040161241693929190614b56565b600060405180830381600087803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b50505050505050505050565b61246d60405161245f906149b8565b604051809103902082611d0c565b6124ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a390614d49565b60405180910390fd5b6124c96040516124bb906149b8565b604051809103902082612bfa565b8073ffffffffffffffffffffffffffffffffffffffff167f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b60405160405180910390a250565b60c881565b6000801b81565b6000600260009054906101000a900460ff1660ff1614612570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256790614fe9565b60405180910390fd5b85600260006101000a81548160ff021916908360ff1602179055508260038190555081600481905550806005819055506125ad6000801b3361313a565b6125cd6040516125bc906149b8565b60405180910390206000801b613148565b60005b85859050811015612625576126186040516125ea906149b8565b60405180910390208787848181106125fe57fe5b90506020020160208101906126139190613793565b611070565b80806001019150506125d0565b50505050505050565b600260009054906101000a900460ff1681565b60045481565b60055481565b600061266d60016000848152602001908152602001600020600001613167565b9050919050565b61267c613047565b826007600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff1663b8fa373683836040518363ffffffff1660e01b8152600401612709929190614aed565b600060405180830381600087803b15801561272357600080fd5b505af1158015612737573d6000803e3d6000fd5b50505050505050565b60c861275e604051612751906149b8565b604051809103902061264d565b1061279e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279590614f09565b60405180910390fd5b6127bb6040516127ad906149b8565b604051809103902082611d0c565b156127fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f290614e69565b60405180910390fd5b61281860405161280a906149b8565b604051809103902082611070565b8073ffffffffffffffffffffffffffffffffffffffff167f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c560405160405180910390a250565b612866612d64565b60045434146128aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a190614d69565b60405180910390fd5b606084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000601f8251161461296057601f85859050166020036040519080825280601f01601f19166020018201604052801561293b5781602001600182028036833780820191505090505b508160405160200161294e929190614994565b60405160208183030381529060405290505b6000600660008860ff1660ff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1660010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905590506000600760008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5b90614fc9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663b07e54bb8a3388886040518563ffffffff1660e01b8152600401612aa39493929190614b16565b600060405180830381600087803b158015612abd57600080fd5b505af1158015612ad1573d6000803e3d6000fd5b50505050506000612b38600260009054906101000a900460ff1689848c89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612e69565b90506060818a600260009054906101000a900460ff1660ff168b60ff168b8b9050888b8b604051602001612b739897969594939291906148b6565b604051602081830303815290604052905083806020019051810190612b989190613917565b3373ffffffffffffffffffffffffffffffffffffffff167f309157efb07b71a4feceddbed881a400fdf6779a9bfe94ee57d61ec1856f349e848c878f87604051612be6959493929190614bcd565b60405180910390a350505050505050505050565b612c216001600084815260200190815260200160002060020154612c1c612ea5565b611d0c565b612c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5790614e89565b60405180910390fd5b612c6a8282612f41565b5050565b60035481565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900478ffffffffffffffffffffffffffffffffffffffffffffffffff169080600001601a9054906101000a900460ff169080600001601b9054906101000a900464ffffffffff16905084565b612cfc613047565b612d0461317c565b565b612d23604051612d15906149b8565b604051809103902033611d0c565b612d62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5990614da9565b60405180910390fd5b565b6000809054906101000a900460ff1615612db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612daa90614ee9565b60405180910390fd5b565b600080836020015178ffffffffffffffffffffffffffffffffffffffffffffffffff16612de184612e35565b1611905092915050565b6000612e2d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506131d7565b905092915050565b6000612e5e612e57604051612e49906149b8565b604051809103902084611a83565b6001612deb565b6001901b9050919050565b60008585858585604051602001612e84959493929190614a04565b60405160208183030381529060405280519060200120905095945050505050565b600033905090565b612ed5816001600085815260200190815260200160002060000161323290919063ffffffff16565b15612f3d57612ee2612ea5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612f69816001600085815260200190815260200160002060000161326290919063ffffffff16565b15612fd157612f76612ea5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b612fe26000801b33611d0c565b806130065750613005604051612ff7906149b8565b604051809103902033611d0c565b5b613045576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303c90614f69565b60405180910390fd5b565b6130546000801b33611d0c565b613093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161308a90614e29565b60405180910390fd5b565b61309d612d64565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336040516130e69190614a7a565b60405180910390a1565b60006130ff8360000183613292565b60001c905092915050565b6000613132836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6132ff565b905092915050565b6131448282612ead565b5050565b8060016000848152602001908152602001600020600201819055505050565b600061317582600001613322565b9050919050565b613184613333565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336040516131cd9190614a7a565b60405180910390a1565b600083831115829061321f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132169190614c87565b60405180910390fd5b5060008385039050809150509392505050565b600061325a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613383565b905092915050565b600061328a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6133f3565b905092915050565b6000818360000180549050116132dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132d490614ca9565b60405180910390fd5b8260000182815481106132ec57fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b6000809054906101000a900460ff16613381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337890614d09565b60405180910390fd5b565b600061338f83836132ff565b6133e85782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506133ed565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146134cf576000600182039050600060018660000180549050039050600086600001828154811061343e57fe5b906000526020600020015490508087600001848154811061345b57fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061349357fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506134d5565b60009150505b92915050565b6040518060800160405280600060048111156134f357fe5b8152602001600078ffffffffffffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600064ffffffffff1681525090565b50805460008255600302906000526020600020908101906135549190613557565b50565b61358b91905b8082111561358757600080820160009055600182016000905560028201600090555060030161355d565b5090565b90565b60008135905061359d8161534d565b92915050565b6000813590506135b281615364565b92915050565b60008083601f8401126135ca57600080fd5b8235905067ffffffffffffffff8111156135e357600080fd5b6020830191508360208202830111156135fb57600080fd5b9250929050565b60008083601f84011261361457600080fd5b8235905067ffffffffffffffff81111561362d57600080fd5b60208301915083602082028301111561364557600080fd5b9250929050565b60008083601f84011261365e57600080fd5b8235905067ffffffffffffffff81111561367757600080fd5b60208301915083602082028301111561368f57600080fd5b9250929050565b60008083601f8401126136a857600080fd5b8235905067ffffffffffffffff8111156136c157600080fd5b6020830191508360208202830111156136d957600080fd5b9250929050565b6000813590506136ef8161537b565b92915050565b6000815190506137048161537b565b92915050565b60008083601f84011261371c57600080fd5b8235905067ffffffffffffffff81111561373557600080fd5b60208301915083600182028301111561374d57600080fd5b9250929050565b60008135905061376381615392565b92915050565b600081359050613778816153a9565b92915050565b60008135905061378d816153c0565b92915050565b6000602082840312156137a557600080fd5b60006137b38482850161358e565b91505092915050565b6000602082840312156137ce57600080fd5b60006137dc848285016135a3565b91505092915050565b6000806000606084860312156137fa57600080fd5b60006138088682870161358e565b9350506020613819868287016136e0565b925050604061382a8682870161358e565b9150509250925092565b6000806000806040858703121561384a57600080fd5b600085013567ffffffffffffffff81111561386457600080fd5b61387087828801613602565b9450945050602085013567ffffffffffffffff81111561388f57600080fd5b61389b87828801613696565b925092505092959194509250565b600080602083850312156138bc57600080fd5b600083013567ffffffffffffffff8111156138d657600080fd5b6138e28582860161364c565b92509250509250929050565b60006020828403121561390057600080fd5b600061390e848285016136e0565b91505092915050565b60006020828403121561392957600080fd5b6000613937848285016136f5565b91505092915050565b6000806040838503121561395357600080fd5b6000613961858286016136e0565b92505060206139728582860161358e565b9150509250929050565b6000806000806080858703121561399257600080fd5b60006139a0878288016136e0565b94505060206139b1878288016136e0565b93505060406139c2878288016136e0565b92505060606139d3878288016136e0565b91505092959194509250565b6000806000604084860312156139f457600080fd5b6000613a02868287016136e0565b935050602084013567ffffffffffffffff811115613a1f57600080fd5b613a2b8682870161370a565b92509250509250925092565b60008060408385031215613a4a57600080fd5b6000613a58858286016136e0565b9250506020613a6985828601613754565b9150509250929050565b60008060008060008060808789031215613a8c57600080fd5b6000613a9a89828a016136e0565b9650506020613aab89828a0161377e565b955050604087013567ffffffffffffffff811115613ac857600080fd5b613ad489828a0161370a565b9450945050606087013567ffffffffffffffff811115613af357600080fd5b613aff89828a0161370a565b92509250509295509295509295565b60008060208385031215613b2157600080fd5b600083013567ffffffffffffffff811115613b3b57600080fd5b613b478582860161370a565b92509250509250929050565b600080600060408486031215613b6857600080fd5b600084013567ffffffffffffffff811115613b8257600080fd5b613b8e8682870161370a565b93509350506020613ba186828701613754565b9150509250925092565b600060208284031215613bbd57600080fd5b6000613bcb84828501613754565b91505092915050565b600060208284031215613be657600080fd5b6000613bf48482850161377e565b91505092915050565b60008060008060008060a08789031215613c1657600080fd5b6000613c2489828a0161377e565b965050602087013567ffffffffffffffff811115613c4157600080fd5b613c4d89828a016135b8565b95509550506040613c6089828a01613754565b9350506060613c7189828a01613754565b9250506080613c8289828a01613754565b9150509295509295509295565b600080600060608486031215613ca457600080fd5b6000613cb28682870161377e565b9350506020613cc3868287016136e0565b9250506040613cd4868287016136e0565b9150509250925092565b60008060008060008060a08789031215613cf757600080fd5b6000613d0589828a0161377e565b9650506020613d1689828a0161377e565b9550506040613d2789828a01613769565b9450506060613d3889828a016136e0565b935050608087013567ffffffffffffffff811115613d5557600080fd5b613d6189828a0161370a565b92509250509295509295509295565b6000613d7c8383614808565b60208301905092915050565b613d9181615253565b82525050565b613da081615185565b82525050565b6000613db182615103565b613dbb818561513c565b9350613dc6836150f3565b8060005b83811015613df7578151613dde8882613d70565b9750613de98361512f565b925050600181019050613dca565b5085935050505092915050565b613e0d816151a9565b82525050565b613e1c816151b5565b82525050565b613e33613e2e826151b5565b6152dd565b82525050565b6000613e45838561514d565b9350613e5283858461529b565b613e5b83615315565b840190509392505050565b6000613e72838561515e565b9350613e7f83858461529b565b82840190509392505050565b6000613e9682615119565b613ea0818561514d565b9350613eb08185602086016152aa565b613eb981615315565b840191505092915050565b6000613ecf82615119565b613ed9818561515e565b9350613ee98185602086016152aa565b80840191505092915050565b6000613f008261510e565b613f0a818561515e565b9350613f1a8185602086016152aa565b80840191505092915050565b613f2f81615265565b82525050565b613f3e81615265565b82525050565b6000613f4f82615124565b613f598185615169565b9350613f698185602086016152aa565b613f7281615315565b840191505092915050565b6000613f8a602283615169565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613ff0601283615169565b91507f4e6f7420656e6f756768207369676e65727300000000000000000000000000006000830152602082019050919050565b6000614030602f83615169565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b6000614096601483615169565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b60006140d6601283615169565b91507f496e76616c6964207265736f75726365494400000000000000000000000000006000830152602082019050919050565b6000614116600f83615169565b91507f4e6f7420726567697374657265642100000000000000000000000000000000006000830152602082019050919050565b6000614156601683615169565b91507f496e636f72726563742066656520737570706c696564000000000000000000006000830152602082019050919050565b6000614196600d83615169565b91507f4f6e6c79206578656375746f72000000000000000000000000000000000000006000830152602082019050919050565b60006141d6600c83615169565b91507f4f6e6c792072656c6179657200000000000000000000000000000000000000006000830152602082019050919050565b6000614216601a83615169565b91507f50726f706f73616c20616c72656164792063616e63656c6c65640000000000006000830152602082019050919050565b6000614256601683615169565b91507f496e76616c69642061646472657373206c656e677468000000000000000000006000830152602082019050919050565b6000614296600d83615169565b91507f416c726561647920766f746564000000000000000000000000000000000000006000830152602082019050919050565b60006142d6600a83615169565b91507f4f6e6c792061646d696e000000000000000000000000000000000000000000006000830152602082019050919050565b6000614316601083615169565b91507f416c7265616479206578656375746564000000000000000000000000000000006000830152602082019050919050565b6000614356601383615169565b91507f416c7265616479207265676973746572656421000000000000000000000000006000830152602082019050919050565b6000614396603083615169565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f207265766f6b65000000000000000000000000000000006020830152604082019050919050565b60006143fc600d83615169565b91507f4e6f7420612072656c61796572000000000000000000000000000000000000006000830152602082019050919050565b600061443c602083615169565b91507f50726f706f73616c206e6f7420617420657870697279207468726573686f6c646000830152602082019050919050565b600061447c601083615169565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b60006144bc601483615169565b91507f4d61782072656c617965727320726561636865640000000000000000000000006000830152602082019050919050565b60006144fc601383615169565b91507f50726f706f73616c206e6f7420706173736564000000000000000000000000006000830152602082019050919050565b600061453c600e83615169565b91507f416c7265616479207369676e65640000000000000000000000000000000000006000830152602082019050919050565b600061457c601583615169565b91507f4f6e6c792061646d696e206f722072656c6179657200000000000000000000006000830152602082019050919050565b60006145bc601083615169565b91507f496e76616c6964207369676174757265000000000000000000000000000000006000830152602082019050919050565b60006145fc601a83615169565b91507f50726f706f73616c20616c72656164792070726f6365737365640000000000006000830152602082019050919050565b600061463c601583615169565b91507f5265736f757263654944206e6f74206d617070656400000000000000000000006000830152602082019050919050565b600061467c601383615169565b91507f416c726561647920696e697469616c697a6564000000000000000000000000006000830152602082019050919050565b60006146bc601f83615169565b91507f43757272656e742066656520697320657175616c20746f206e657720666565006000830152602082019050919050565b60006146fc600c8361517a565b91507f52454c415945525f524f4c4500000000000000000000000000000000000000006000830152600c82019050919050565b600061473c602f83615169565b91507f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008301527f20726f6c657320666f722073656c6600000000000000000000000000000000006020830152604082019050919050565b6080820160008201516147ab6000850182613f26565b5060208201516147be60208501826147ea565b5060408201516147d16040850182614881565b5060608201516147e4606085018261483d565b50505050565b6147f3816151f2565b82525050565b614802816151f2565b82525050565b61481181615217565b82525050565b61482081615217565b82525050565b61483761483282615217565b6152e7565b82525050565b61484681615221565b82525050565b61485581615221565b82525050565b61486481615232565b82525050565b61487b61487682615232565b6152f1565b82525050565b61488a81615246565b82525050565b61489981615246565b82525050565b6148b06148ab82615246565b615303565b82525050565b60006148c2828b613e22565b6020820191506148d2828a613e22565b6020820191506148e28289614826565b6020820191506148f28288614826565b6020820191506149028287614826565b6020820191506149128286613ec4565b915061491f828486613e66565b91508190509998505050505050505050565b600061493e828486613e66565b91508190509392505050565b60006149568287613ec4565b91506149628286613e22565b6020820191506149728285613e22565b6020820191506149828284613e22565b60208201915081905095945050505050565b60006149a08285613ef5565b91506149ac8284613ec4565b91508190509392505050565b60006149c3826146ef565b9150819050919050565b60006149d98287614826565b6020820191506149e98286613ec4565b91506149f6828486613e66565b915081905095945050505050565b6000614a10828861489f565b600182019150614a20828761489f565b600182019150614a30828661486a565b600882019150614a408285613e22565b602082019150614a508284613ec4565b91508190509695505050505050565b6000602082019050614a746000830184613d97565b92915050565b6000602082019050614a8f6000830184613d88565b92915050565b60006020820190508181036000830152614aaf8184613da6565b905092915050565b6000602082019050614acc6000830184613e04565b92915050565b6000602082019050614ae76000830184613e13565b92915050565b6000604082019050614b026000830185613e13565b614b0f6020830184613d97565b9392505050565b6000606082019050614b2b6000830187613e13565b614b386020830186613d88565b8181036040830152614b4b818486613e39565b905095945050505050565b6000604082019050614b6b6000830186613e13565b8181036020830152614b7e818486613e39565b9050949350505050565b6000608082019050614b9d6000830187613e13565b614baa6020830186614890565b614bb76040830185613e13565b614bc46060830184613e13565b95945050505050565b600060a082019050614be26000830188613e13565b614bef6020830187614890565b614bfc604083018661485b565b614c096060830185613e13565b8181036080830152614c1b8184613e8b565b90509695505050505050565b6000602082019050614c3c6000830184613f35565b92915050565b6000608082019050614c576000830187613f35565b614c6460208301866147f9565b614c716040830185614890565b614c7e606083018461484c565b95945050505050565b60006020820190508181036000830152614ca18184613f44565b905092915050565b60006020820190508181036000830152614cc281613f7d565b9050919050565b60006020820190508181036000830152614ce281613fe3565b9050919050565b60006020820190508181036000830152614d0281614023565b9050919050565b60006020820190508181036000830152614d2281614089565b9050919050565b60006020820190508181036000830152614d42816140c9565b9050919050565b60006020820190508181036000830152614d6281614109565b9050919050565b60006020820190508181036000830152614d8281614149565b9050919050565b60006020820190508181036000830152614da281614189565b9050919050565b60006020820190508181036000830152614dc2816141c9565b9050919050565b60006020820190508181036000830152614de281614209565b9050919050565b60006020820190508181036000830152614e0281614249565b9050919050565b60006020820190508181036000830152614e2281614289565b9050919050565b60006020820190508181036000830152614e42816142c9565b9050919050565b60006020820190508181036000830152614e6281614309565b9050919050565b60006020820190508181036000830152614e8281614349565b9050919050565b60006020820190508181036000830152614ea281614389565b9050919050565b60006020820190508181036000830152614ec2816143ef565b9050919050565b60006020820190508181036000830152614ee28161442f565b9050919050565b60006020820190508181036000830152614f028161446f565b9050919050565b60006020820190508181036000830152614f22816144af565b9050919050565b60006020820190508181036000830152614f42816144ef565b9050919050565b60006020820190508181036000830152614f628161452f565b9050919050565b60006020820190508181036000830152614f828161456f565b9050919050565b60006020820190508181036000830152614fa2816145af565b9050919050565b60006020820190508181036000830152614fc2816145ef565b9050919050565b60006020820190508181036000830152614fe28161462f565b9050919050565b600060208201905081810360008301526150028161466f565b9050919050565b60006020820190508181036000830152615022816146af565b9050919050565b600060208201905081810360008301526150428161472f565b9050919050565b600060808201905061505e6000830184614795565b92915050565b60006020820190506150796000830184614817565b92915050565b6000602082019050615094600083018461485b565b92915050565b60006020820190506150af6000830184614890565b92915050565b60006060820190506150ca6000830186614890565b6150d76020830185614890565b81810360408301526150e98184613e8b565b9050949350505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000615190826151d2565b9050919050565b60006151a2826151d2565b9050919050565b60008115159050919050565b6000819050919050565b60008190506151cd82615340565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600078ffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600061525e82615277565b9050919050565b6000615270826151bf565b9050919050565b600061528282615289565b9050919050565b6000615294826151d2565b9050919050565b82818337600083830152505050565b60005b838110156152c85780820151818401526020810190506152ad565b838111156152d7576000848401525b50505050565b6000819050919050565b6000819050919050565b60006152fc82615326565b9050919050565b600061530e82615333565b9050919050565b6000601f19601f8301169050919050565b60008160c01b9050919050565b60008160f81b9050919050565b6005811061534a57fe5b50565b61535681615185565b811461536157600080fd5b50565b61536d81615197565b811461537857600080fd5b50565b615384816151b5565b811461538f57600080fd5b50565b61539b81615217565b81146153a657600080fd5b50565b6153b281615232565b81146153bd57600080fd5b50565b6153c981615246565b81146153d457600080fd5b5056fea2646970667358221220948b2c25d9312f68a764fad036e415091313c0c51f86add76c81d1c310f6965664736f6c63430006040033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bridge.Contract.DEFAULTADMINROLE(&_Bridge.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bridge.Contract.DEFAULTADMINROLE(&_Bridge.CallOpts)
}

// MAXRELAYERS is a free data retrieval call binding the contract method 0x9debb3bd.
//
// Solidity: function MAX_RELAYERS() view returns(uint256)
func (_Bridge *BridgeCaller) MAXRELAYERS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "MAX_RELAYERS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXRELAYERS is a free data retrieval call binding the contract method 0x9debb3bd.
//
// Solidity: function MAX_RELAYERS() view returns(uint256)
func (_Bridge *BridgeSession) MAXRELAYERS() (*big.Int, error) {
	return _Bridge.Contract.MAXRELAYERS(&_Bridge.CallOpts)
}

// MAXRELAYERS is a free data retrieval call binding the contract method 0x9debb3bd.
//
// Solidity: function MAX_RELAYERS() view returns(uint256)
func (_Bridge *BridgeCallerSession) MAXRELAYERS() (*big.Int, error) {
	return _Bridge.Contract.MAXRELAYERS(&_Bridge.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeCaller) RELAYERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "RELAYER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeSession) RELAYERROLE() ([32]byte, error) {
	return _Bridge.Contract.RELAYERROLE(&_Bridge.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeCallerSession) RELAYERROLE() ([32]byte, error) {
	return _Bridge.Contract.RELAYERROLE(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeCaller) ChainID(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_chainID")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeCallerSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 uint8) (uint64, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_depositCounts", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint64)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 uint8) (uint64, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_Bridge *BridgeCaller) Expiry(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_expiry")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_Bridge *BridgeSession) Expiry() (*big.Int, error) {
	return _Bridge.Contract.Expiry(&_Bridge.CallOpts)
}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_Bridge *BridgeCallerSession) Expiry() (*big.Int, error) {
	return _Bridge.Contract.Expiry(&_Bridge.CallOpts)
}

// Fee is a free data retrieval call binding the contract method 0xc5b37c22.
//
// Solidity: function _fee() view returns(uint256)
func (_Bridge *BridgeCaller) Fee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_fee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Fee is a free data retrieval call binding the contract method 0xc5b37c22.
//
// Solidity: function _fee() view returns(uint256)
func (_Bridge *BridgeSession) Fee() (*big.Int, error) {
	return _Bridge.Contract.Fee(&_Bridge.CallOpts)
}

// Fee is a free data retrieval call binding the contract method 0xc5b37c22.
//
// Solidity: function _fee() view returns(uint256)
func (_Bridge *BridgeCallerSession) Fee() (*big.Int, error) {
	return _Bridge.Contract.Fee(&_Bridge.CallOpts)
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x56df07d7.
//
// Solidity: function _hasVotedOnProposal(bytes32 depositKey, address relayer) view returns(bool)
func (_Bridge *BridgeCaller) HasVotedOnProposal(opts *bind.CallOpts, depositKey [32]byte, relayer common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_hasVotedOnProposal", depositKey, relayer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x56df07d7.
//
// Solidity: function _hasVotedOnProposal(bytes32 depositKey, address relayer) view returns(bool)
func (_Bridge *BridgeSession) HasVotedOnProposal(depositKey [32]byte, relayer common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnProposal(&_Bridge.CallOpts, depositKey, relayer)
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x56df07d7.
//
// Solidity: function _hasVotedOnProposal(bytes32 depositKey, address relayer) view returns(bool)
func (_Bridge *BridgeCallerSession) HasVotedOnProposal(depositKey [32]byte, relayer common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnProposal(&_Bridge.CallOpts, depositKey, relayer)
}

// Proposals is a free data retrieval call binding the contract method 0xf2e2af94.
//
// Solidity: function _proposals(bytes32 ) view returns(uint8 _status, uint200 _yesVotes, uint8 _yesVotesTotal, uint40 _proposedBlock)
func (_Bridge *BridgeCaller) Proposals(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Status        uint8
	YesVotes      *big.Int
	YesVotesTotal uint8
	ProposedBlock *big.Int
}, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_proposals", arg0)

	outstruct := new(struct {
		Status        uint8
		YesVotes      *big.Int
		YesVotesTotal uint8
		ProposedBlock *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Status = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.YesVotes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.YesVotesTotal = *abi.ConvertType(out[2], new(uint8)).(*uint8)
	outstruct.ProposedBlock = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Proposals is a free data retrieval call binding the contract method 0xf2e2af94.
//
// Solidity: function _proposals(bytes32 ) view returns(uint8 _status, uint200 _yesVotes, uint8 _yesVotesTotal, uint40 _proposedBlock)
func (_Bridge *BridgeSession) Proposals(arg0 [32]byte) (struct {
	Status        uint8
	YesVotes      *big.Int
	YesVotesTotal uint8
	ProposedBlock *big.Int
}, error) {
	return _Bridge.Contract.Proposals(&_Bridge.CallOpts, arg0)
}

// Proposals is a free data retrieval call binding the contract method 0xf2e2af94.
//
// Solidity: function _proposals(bytes32 ) view returns(uint8 _status, uint200 _yesVotes, uint8 _yesVotesTotal, uint40 _proposedBlock)
func (_Bridge *BridgeCallerSession) Proposals(arg0 [32]byte) (struct {
	Status        uint8
	YesVotes      *big.Int
	YesVotesTotal uint8
	ProposedBlock *big.Int
}, error) {
	return _Bridge.Contract.Proposals(&_Bridge.CallOpts, arg0)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeCaller) RelayerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_relayerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeCallerSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCaller) ResourceIDToHandlerAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_resourceIDToHandlerAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// ResourceIDToHandlerAddress is a free data retrieval call binding the contract method 0x84db809f.
//
// Solidity: function _resourceIDToHandlerAddress(bytes32 ) view returns(address)
func (_Bridge *BridgeCallerSession) ResourceIDToHandlerAddress(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.ResourceIDToHandlerAddress(&_Bridge.CallOpts, arg0)
}

// GetDepositKey is a free data retrieval call binding the contract method 0x2c3445a4.
//
// Solidity: function getDepositKey(uint8 originChainID, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data) pure returns(bytes32)
func (_Bridge *BridgeCaller) GetDepositKey(opts *bind.CallOpts, originChainID uint8, destinationChainID uint8, depositNonce uint64, resourceID [32]byte, data []byte) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getDepositKey", originChainID, destinationChainID, depositNonce, resourceID, data)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDepositKey is a free data retrieval call binding the contract method 0x2c3445a4.
//
// Solidity: function getDepositKey(uint8 originChainID, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data) pure returns(bytes32)
func (_Bridge *BridgeSession) GetDepositKey(originChainID uint8, destinationChainID uint8, depositNonce uint64, resourceID [32]byte, data []byte) ([32]byte, error) {
	return _Bridge.Contract.GetDepositKey(&_Bridge.CallOpts, originChainID, destinationChainID, depositNonce, resourceID, data)
}

// GetDepositKey is a free data retrieval call binding the contract method 0x2c3445a4.
//
// Solidity: function getDepositKey(uint8 originChainID, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data) pure returns(bytes32)
func (_Bridge *BridgeCallerSession) GetDepositKey(originChainID uint8, destinationChainID uint8, depositNonce uint64, resourceID [32]byte, data []byte) ([32]byte, error) {
	return _Bridge.Contract.GetDepositKey(&_Bridge.CallOpts, originChainID, destinationChainID, depositNonce, resourceID, data)
}

// GetMessageExecutionState is a free data retrieval call binding the contract method 0x20bbad70.
//
// Solidity: function getMessageExecutionState(bytes32[] depositKeys) view returns(uint256[] states)
func (_Bridge *BridgeCaller) GetMessageExecutionState(opts *bind.CallOpts, depositKeys [][32]byte) ([]*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getMessageExecutionState", depositKeys)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetMessageExecutionState is a free data retrieval call binding the contract method 0x20bbad70.
//
// Solidity: function getMessageExecutionState(bytes32[] depositKeys) view returns(uint256[] states)
func (_Bridge *BridgeSession) GetMessageExecutionState(depositKeys [][32]byte) ([]*big.Int, error) {
	return _Bridge.Contract.GetMessageExecutionState(&_Bridge.CallOpts, depositKeys)
}

// GetMessageExecutionState is a free data retrieval call binding the contract method 0x20bbad70.
//
// Solidity: function getMessageExecutionState(bytes32[] depositKeys) view returns(uint256[] states)
func (_Bridge *BridgeCallerSession) GetMessageExecutionState(depositKeys [][32]byte) ([]*big.Int, error) {
	return _Bridge.Contract.GetMessageExecutionState(&_Bridge.CallOpts, depositKeys)
}

// GetProposal is a free data retrieval call binding the contract method 0x430694cf.
//
// Solidity: function getProposal(bytes32 depositKey) view returns((uint8,uint200,uint8,uint40))
func (_Bridge *BridgeCaller) GetProposal(opts *bind.CallOpts, depositKey [32]byte) (BridgeProposal, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getProposal", depositKey)

	if err != nil {
		return *new(BridgeProposal), err
	}

	out0 := *abi.ConvertType(out[0], new(BridgeProposal)).(*BridgeProposal)

	return out0, err

}

// GetProposal is a free data retrieval call binding the contract method 0x430694cf.
//
// Solidity: function getProposal(bytes32 depositKey) view returns((uint8,uint200,uint8,uint40))
func (_Bridge *BridgeSession) GetProposal(depositKey [32]byte) (BridgeProposal, error) {
	return _Bridge.Contract.GetProposal(&_Bridge.CallOpts, depositKey)
}

// GetProposal is a free data retrieval call binding the contract method 0x430694cf.
//
// Solidity: function getProposal(bytes32 depositKey) view returns((uint8,uint200,uint8,uint40))
func (_Bridge *BridgeCallerSession) GetProposal(depositKey [32]byte) (BridgeProposal, error) {
	return _Bridge.Contract.GetProposal(&_Bridge.CallOpts, depositKey)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetRoleAdmin(&_Bridge.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetRoleAdmin(&_Bridge.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bridge.Contract.GetRoleMember(&_Bridge.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bridge.Contract.GetRoleMember(&_Bridge.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberCount(&_Bridge.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberCount(&_Bridge.CallOpts, role)
}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeCaller) GetRoleMemberIndex(opts *bind.CallOpts, role [32]byte, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getRoleMemberIndex", role, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeSession) GetRoleMemberIndex(role [32]byte, account common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberIndex(&_Bridge.CallOpts, role, account)
}

// GetRoleMemberIndex is a free data retrieval call binding the contract method 0x4e0df3f6.
//
// Solidity: function getRoleMemberIndex(bytes32 role, address account) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetRoleMemberIndex(role [32]byte, account common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberIndex(&_Bridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bridge.Contract.HasRole(&_Bridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bridge.Contract.HasRole(&_Bridge.CallOpts, role, account)
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeCaller) IsRelayer(opts *bind.CallOpts, relayer common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isRelayer", relayer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeSession) IsRelayer(relayer common.Address) (bool, error) {
	return _Bridge.Contract.IsRelayer(&_Bridge.CallOpts, relayer)
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeCallerSession) IsRelayer(relayer common.Address) (bool, error) {
	return _Bridge.Contract.IsRelayer(&_Bridge.CallOpts, relayer)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCallerSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactor) AdminAddRelayer(opts *bind.TransactOpts, relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminAddRelayer", relayerAddress)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeSession) AdminAddRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminAddRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminAddRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminAddRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminChangeFee is a paid mutator transaction binding the contract method 0x91c404ac.
//
// Solidity: function adminChangeFee(uint256 newFee) returns()
func (_Bridge *BridgeTransactor) AdminChangeFee(opts *bind.TransactOpts, newFee *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeFee", newFee)
}

// AdminChangeFee is a paid mutator transaction binding the contract method 0x91c404ac.
//
// Solidity: function adminChangeFee(uint256 newFee) returns()
func (_Bridge *BridgeSession) AdminChangeFee(newFee *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFee(&_Bridge.TransactOpts, newFee)
}

// AdminChangeFee is a paid mutator transaction binding the contract method 0x91c404ac.
//
// Solidity: function adminChangeFee(uint256 newFee) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeFee(newFee *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeFee(&_Bridge.TransactOpts, newFee)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeTransactor) AdminChangeRelayerThreshold(opts *bind.TransactOpts, newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeRelayerThreshold", newThreshold)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeSession) AdminChangeRelayerThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeRelayerThreshold(&_Bridge.TransactOpts, newThreshold)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeRelayerThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeRelayerThreshold(&_Bridge.TransactOpts, newThreshold)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminPauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminPauseTransfers")
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminRelease is a paid mutator transaction binding the contract method 0x4713651d.
//
// Solidity: function adminRelease(bytes32 resourceID, bytes data) returns()
func (_Bridge *BridgeTransactor) AdminRelease(opts *bind.TransactOpts, resourceID [32]byte, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminRelease", resourceID, data)
}

// AdminRelease is a paid mutator transaction binding the contract method 0x4713651d.
//
// Solidity: function adminRelease(bytes32 resourceID, bytes data) returns()
func (_Bridge *BridgeSession) AdminRelease(resourceID [32]byte, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRelease(&_Bridge.TransactOpts, resourceID, data)
}

// AdminRelease is a paid mutator transaction binding the contract method 0x4713651d.
//
// Solidity: function adminRelease(bytes32 resourceID, bytes data) returns()
func (_Bridge *BridgeTransactorSession) AdminRelease(resourceID [32]byte, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRelease(&_Bridge.TransactOpts, resourceID, data)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactor) AdminRemoveRelayer(opts *bind.TransactOpts, relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminRemoveRelayer", relayerAddress)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeSession) AdminRemoveRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRemoveRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminRemoveRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRemoveRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x390ba7f8.
//
// Solidity: function adminSetBurnable(bytes32 resourceID) returns()
func (_Bridge *BridgeTransactor) AdminSetBurnable(opts *bind.TransactOpts, resourceID [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetBurnable", resourceID)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x390ba7f8.
//
// Solidity: function adminSetBurnable(bytes32 resourceID) returns()
func (_Bridge *BridgeSession) AdminSetBurnable(resourceID [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, resourceID)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x390ba7f8.
//
// Solidity: function adminSetBurnable(bytes32 resourceID) returns()
func (_Bridge *BridgeTransactorSession) AdminSetBurnable(resourceID [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, resourceID)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetResource(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetResource", handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResource(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminUnpauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminUnpauseTransfers")
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x37376ca8.
//
// Solidity: function cancelProposal(bytes32 depositKey) returns()
func (_Bridge *BridgeTransactor) CancelProposal(opts *bind.TransactOpts, depositKey [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "cancelProposal", depositKey)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x37376ca8.
//
// Solidity: function cancelProposal(bytes32 depositKey) returns()
func (_Bridge *BridgeSession) CancelProposal(depositKey [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.CancelProposal(&_Bridge.TransactOpts, depositKey)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x37376ca8.
//
// Solidity: function cancelProposal(bytes32 depositKey) returns()
func (_Bridge *BridgeTransactorSession) CancelProposal(depositKey [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.CancelProposal(&_Bridge.TransactOpts, depositKey)
}

// Deposit is a paid mutator transaction binding the contract method 0xd1cafc08.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, bytes executor, bytes data) payable returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, resourceID [32]byte, destinationChainID uint8, executor []byte, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", resourceID, destinationChainID, executor, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xd1cafc08.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, bytes executor, bytes data) payable returns()
func (_Bridge *BridgeSession) Deposit(resourceID [32]byte, destinationChainID uint8, executor []byte, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, resourceID, destinationChainID, executor, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xd1cafc08.
//
// Solidity: function deposit(bytes32 resourceID, uint8 destinationChainID, bytes executor, bytes data) payable returns()
func (_Bridge *BridgeTransactorSession) Deposit(resourceID [32]byte, destinationChainID uint8, executor []byte, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, resourceID, destinationChainID, executor, data)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x9298e2d1.
//
// Solidity: function executeMessage(bytes data, uint256 adminNoThreshold) returns()
func (_Bridge *BridgeTransactor) ExecuteMessage(opts *bind.TransactOpts, data []byte, adminNoThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeMessage", data, adminNoThreshold)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x9298e2d1.
//
// Solidity: function executeMessage(bytes data, uint256 adminNoThreshold) returns()
func (_Bridge *BridgeSession) ExecuteMessage(data []byte, adminNoThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteMessage(&_Bridge.TransactOpts, data, adminNoThreshold)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x9298e2d1.
//
// Solidity: function executeMessage(bytes data, uint256 adminNoThreshold) returns()
func (_Bridge *BridgeTransactorSession) ExecuteMessage(data []byte, adminNoThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteMessage(&_Bridge.TransactOpts, data, adminNoThreshold)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x30faa259.
//
// Solidity: function executeProposal(bytes data) returns()
func (_Bridge *BridgeTransactor) ExecuteProposal(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeProposal", data)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x30faa259.
//
// Solidity: function executeProposal(bytes data) returns()
func (_Bridge *BridgeSession) ExecuteProposal(data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, data)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0x30faa259.
//
// Solidity: function executeProposal(bytes data) returns()
func (_Bridge *BridgeTransactorSession) ExecuteProposal(data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteProposal(&_Bridge.TransactOpts, data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.GrantRole(&_Bridge.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.GrantRole(&_Bridge.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xaa4304a4.
//
// Solidity: function initialize(uint8 chainID, address[] initialRelayers, uint256 initialRelayerThreshold, uint256 fee, uint256 expiry) returns()
func (_Bridge *BridgeTransactor) Initialize(opts *bind.TransactOpts, chainID uint8, initialRelayers []common.Address, initialRelayerThreshold *big.Int, fee *big.Int, expiry *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "initialize", chainID, initialRelayers, initialRelayerThreshold, fee, expiry)
}

// Initialize is a paid mutator transaction binding the contract method 0xaa4304a4.
//
// Solidity: function initialize(uint8 chainID, address[] initialRelayers, uint256 initialRelayerThreshold, uint256 fee, uint256 expiry) returns()
func (_Bridge *BridgeSession) Initialize(chainID uint8, initialRelayers []common.Address, initialRelayerThreshold *big.Int, fee *big.Int, expiry *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.Initialize(&_Bridge.TransactOpts, chainID, initialRelayers, initialRelayerThreshold, fee, expiry)
}

// Initialize is a paid mutator transaction binding the contract method 0xaa4304a4.
//
// Solidity: function initialize(uint8 chainID, address[] initialRelayers, uint256 initialRelayerThreshold, uint256 fee, uint256 expiry) returns()
func (_Bridge *BridgeTransactorSession) Initialize(chainID uint8, initialRelayers []common.Address, initialRelayerThreshold *big.Int, fee *big.Int, expiry *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.Initialize(&_Bridge.TransactOpts, chainID, initialRelayers, initialRelayerThreshold, fee, expiry)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeTransactor) RenounceAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceAdmin", newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceAdmin(&_Bridge.TransactOpts, newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeTransactorSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceAdmin(&_Bridge.TransactOpts, newAdmin)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceRole(&_Bridge.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceRole(&_Bridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RevokeRole(&_Bridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RevokeRole(&_Bridge.TransactOpts, role, account)
}

// TransferFunds is a paid mutator transaction binding the contract method 0x4603ae38.
//
// Solidity: function transferFunds(address[] addrs, uint256[] amounts) returns()
func (_Bridge *BridgeTransactor) TransferFunds(opts *bind.TransactOpts, addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferFunds", addrs, amounts)
}

// TransferFunds is a paid mutator transaction binding the contract method 0x4603ae38.
//
// Solidity: function transferFunds(address[] addrs, uint256[] amounts) returns()
func (_Bridge *BridgeSession) TransferFunds(addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransferFunds(&_Bridge.TransactOpts, addrs, amounts)
}

// TransferFunds is a paid mutator transaction binding the contract method 0x4603ae38.
//
// Solidity: function transferFunds(address[] addrs, uint256[] amounts) returns()
func (_Bridge *BridgeTransactorSession) TransferFunds(addrs []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransferFunds(&_Bridge.TransactOpts, addrs, amounts)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x03047f15.
//
// Solidity: function voteProposal(bytes32 depositKey, bytes32 v, bytes32 r, bytes32 s) returns()
func (_Bridge *BridgeTransactor) VoteProposal(opts *bind.TransactOpts, depositKey [32]byte, v [32]byte, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteProposal", depositKey, v, r, s)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x03047f15.
//
// Solidity: function voteProposal(bytes32 depositKey, bytes32 v, bytes32 r, bytes32 s) returns()
func (_Bridge *BridgeSession) VoteProposal(depositKey [32]byte, v [32]byte, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteProposal(&_Bridge.TransactOpts, depositKey, v, r, s)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x03047f15.
//
// Solidity: function voteProposal(bytes32 depositKey, bytes32 v, bytes32 r, bytes32 s) returns()
func (_Bridge *BridgeTransactorSession) VoteProposal(depositKey [32]byte, v [32]byte, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteProposal(&_Bridge.TransactOpts, depositKey, v, r, s)
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	From               common.Address
	Executor           [32]byte
	DepositKey         [32]byte
	DestinationChainID uint8
	DepositNonce       uint64
	ResourceID         [32]byte
	Data               []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x309157efb07b71a4feceddbed881a400fdf6779a9bfe94ee57d61ec1856f349e.
//
// Solidity: event Deposit(address indexed from, bytes32 indexed executor, bytes32 depositKey, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, from []common.Address, executor [][32]byte) (*BridgeDepositIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", fromRule, executorRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x309157efb07b71a4feceddbed881a400fdf6779a9bfe94ee57d61ec1856f349e.
//
// Solidity: event Deposit(address indexed from, bytes32 indexed executor, bytes32 depositKey, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, from []common.Address, executor [][32]byte) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", fromRule, executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x309157efb07b71a4feceddbed881a400fdf6779a9bfe94ee57d61ec1856f349e.
//
// Solidity: event Deposit(address indexed from, bytes32 indexed executor, bytes32 depositKey, uint8 destinationChainID, uint64 depositNonce, bytes32 resourceID, bytes data)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeExecuteIterator is returned from FilterExecute and is used to iterate over the raw logs and unpacked data for Execute events raised by the Bridge contract.
type BridgeExecuteIterator struct {
	Event *BridgeExecute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeExecuteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeExecute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeExecute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeExecuteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeExecuteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeExecute represents a Execute event raised by the Bridge contract.
type BridgeExecute struct {
	Executor           [32]byte
	DepositKey         [32]byte
	OriginChainID      uint8
	DestinationChainID uint8
	Data               []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterExecute is a free log retrieval operation binding the contract event 0xc1e49ae204831e426585ee37d419d260ebc28b2c7a214c549909753eb515c6b4.
//
// Solidity: event Execute(bytes32 indexed executor, bytes32 indexed depositKey, uint8 originChainID, uint8 destinationChainID, bytes data)
func (_Bridge *BridgeFilterer) FilterExecute(opts *bind.FilterOpts, executor [][32]byte, depositKey [][32]byte) (*BridgeExecuteIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}
	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Execute", executorRule, depositKeyRule)
	if err != nil {
		return nil, err
	}
	return &BridgeExecuteIterator{contract: _Bridge.contract, event: "Execute", logs: logs, sub: sub}, nil
}

// WatchExecute is a free log subscription operation binding the contract event 0xc1e49ae204831e426585ee37d419d260ebc28b2c7a214c549909753eb515c6b4.
//
// Solidity: event Execute(bytes32 indexed executor, bytes32 indexed depositKey, uint8 originChainID, uint8 destinationChainID, bytes data)
func (_Bridge *BridgeFilterer) WatchExecute(opts *bind.WatchOpts, sink chan<- *BridgeExecute, executor [][32]byte, depositKey [][32]byte) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}
	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Execute", executorRule, depositKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeExecute)
				if err := _Bridge.contract.UnpackLog(event, "Execute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecute is a log parse operation binding the contract event 0xc1e49ae204831e426585ee37d419d260ebc28b2c7a214c549909753eb515c6b4.
//
// Solidity: event Execute(bytes32 indexed executor, bytes32 indexed depositKey, uint8 originChainID, uint8 destinationChainID, bytes data)
func (_Bridge *BridgeFilterer) ParseExecute(log types.Log) (*BridgeExecute, error) {
	event := new(BridgeExecute)
	if err := _Bridge.contract.UnpackLog(event, "Execute", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeExecutedIterator is returned from FilterExecuted and is used to iterate over the raw logs and unpacked data for Executed events raised by the Bridge contract.
type BridgeExecutedIterator struct {
	Event *BridgeExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeExecuted represents a Executed event raised by the Bridge contract.
type BridgeExecuted struct {
	Executor   common.Address
	DepositKey [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuted is a free log retrieval operation binding the contract event 0x71ed0a768275994af299aae0bbf451857ec497f011f4efb5d42d76a1075b461b.
//
// Solidity: event Executed(address indexed executor, bytes32 indexed depositKey)
func (_Bridge *BridgeFilterer) FilterExecuted(opts *bind.FilterOpts, executor []common.Address, depositKey [][32]byte) (*BridgeExecutedIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}
	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Executed", executorRule, depositKeyRule)
	if err != nil {
		return nil, err
	}
	return &BridgeExecutedIterator{contract: _Bridge.contract, event: "Executed", logs: logs, sub: sub}, nil
}

// WatchExecuted is a free log subscription operation binding the contract event 0x71ed0a768275994af299aae0bbf451857ec497f011f4efb5d42d76a1075b461b.
//
// Solidity: event Executed(address indexed executor, bytes32 indexed depositKey)
func (_Bridge *BridgeFilterer) WatchExecuted(opts *bind.WatchOpts, sink chan<- *BridgeExecuted, executor []common.Address, depositKey [][32]byte) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}
	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Executed", executorRule, depositKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeExecuted)
				if err := _Bridge.contract.UnpackLog(event, "Executed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuted is a log parse operation binding the contract event 0x71ed0a768275994af299aae0bbf451857ec497f011f4efb5d42d76a1075b461b.
//
// Solidity: event Executed(address indexed executor, bytes32 indexed depositKey)
func (_Bridge *BridgeFilterer) ParseExecuted(log types.Log) (*BridgeExecuted, error) {
	event := new(BridgeExecuted)
	if err := _Bridge.contract.UnpackLog(event, "Executed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Bridge contract.
type BridgePausedIterator struct {
	Event *BridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgePaused represents a Paused event raised by the Bridge contract.
type BridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*BridgePausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BridgePausedIterator{contract: _Bridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BridgePaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgePaused)
				if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) ParsePaused(log types.Log) (*BridgePaused, error) {
	event := new(BridgePaused)
	if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeProposalEventIterator is returned from FilterProposalEvent and is used to iterate over the raw logs and unpacked data for ProposalEvent events raised by the Bridge contract.
type BridgeProposalEventIterator struct {
	Event *BridgeProposalEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalEvent represents a ProposalEvent event raised by the Bridge contract.
type BridgeProposalEvent struct {
	DepositKey [32]byte
	Status     uint8
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalEvent is a free log retrieval operation binding the contract event 0xe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e.
//
// Solidity: event ProposalEvent(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) FilterProposalEvent(opts *bind.FilterOpts, depositKey [][32]byte) (*BridgeProposalEventIterator, error) {

	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalEvent", depositKeyRule)
	if err != nil {
		return nil, err
	}
	return &BridgeProposalEventIterator{contract: _Bridge.contract, event: "ProposalEvent", logs: logs, sub: sub}, nil
}

// WatchProposalEvent is a free log subscription operation binding the contract event 0xe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e.
//
// Solidity: event ProposalEvent(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) WatchProposalEvent(opts *bind.WatchOpts, sink chan<- *BridgeProposalEvent, depositKey [][32]byte) (event.Subscription, error) {

	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalEvent", depositKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalEvent)
				if err := _Bridge.contract.UnpackLog(event, "ProposalEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalEvent is a log parse operation binding the contract event 0xe4cadfe014a057259e76279e8d867ae29d300b2b4226cdf3b446105f4f329d0e.
//
// Solidity: event ProposalEvent(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) ParseProposalEvent(log types.Log) (*BridgeProposalEvent, error) {
	event := new(BridgeProposalEvent)
	if err := _Bridge.contract.UnpackLog(event, "ProposalEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeProposalVoteIterator is returned from FilterProposalVote and is used to iterate over the raw logs and unpacked data for ProposalVote events raised by the Bridge contract.
type BridgeProposalVoteIterator struct {
	Event *BridgeProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalVote represents a ProposalVote event raised by the Bridge contract.
type BridgeProposalVote struct {
	DepositKey [32]byte
	Status     uint8
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterProposalVote is a free log retrieval operation binding the contract event 0x8e39a8cb5a95479e706618eec60583b10090b821ced6a7a4c125b85a9a7724c8.
//
// Solidity: event ProposalVote(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) FilterProposalVote(opts *bind.FilterOpts, depositKey [][32]byte) (*BridgeProposalVoteIterator, error) {

	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalVote", depositKeyRule)
	if err != nil {
		return nil, err
	}
	return &BridgeProposalVoteIterator{contract: _Bridge.contract, event: "ProposalVote", logs: logs, sub: sub}, nil
}

// WatchProposalVote is a free log subscription operation binding the contract event 0x8e39a8cb5a95479e706618eec60583b10090b821ced6a7a4c125b85a9a7724c8.
//
// Solidity: event ProposalVote(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) WatchProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeProposalVote, depositKey [][32]byte) (event.Subscription, error) {

	var depositKeyRule []interface{}
	for _, depositKeyItem := range depositKey {
		depositKeyRule = append(depositKeyRule, depositKeyItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalVote", depositKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "ProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalVote is a log parse operation binding the contract event 0x8e39a8cb5a95479e706618eec60583b10090b821ced6a7a4c125b85a9a7724c8.
//
// Solidity: event ProposalVote(bytes32 indexed depositKey, uint8 status)
func (_Bridge *BridgeFilterer) ParseProposalVote(log types.Log) (*BridgeProposalVote, error) {
	event := new(BridgeProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "ProposalVote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRelayerAddedIterator is returned from FilterRelayerAdded and is used to iterate over the raw logs and unpacked data for RelayerAdded events raised by the Bridge contract.
type BridgeRelayerAddedIterator struct {
	Event *BridgeRelayerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerAdded represents a RelayerAdded event raised by the Bridge contract.
type BridgeRelayerAdded struct {
	Relayer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRelayerAdded is a free log retrieval operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) FilterRelayerAdded(opts *bind.FilterOpts, relayer []common.Address) (*BridgeRelayerAddedIterator, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerAdded", relayerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerAddedIterator{contract: _Bridge.contract, event: "RelayerAdded", logs: logs, sub: sub}, nil
}

// WatchRelayerAdded is a free log subscription operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) WatchRelayerAdded(opts *bind.WatchOpts, sink chan<- *BridgeRelayerAdded, relayer []common.Address) (event.Subscription, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerAdded", relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerAdded)
				if err := _Bridge.contract.UnpackLog(event, "RelayerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerAdded is a log parse operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) ParseRelayerAdded(log types.Log) (*BridgeRelayerAdded, error) {
	event := new(BridgeRelayerAdded)
	if err := _Bridge.contract.UnpackLog(event, "RelayerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRelayerRemovedIterator is returned from FilterRelayerRemoved and is used to iterate over the raw logs and unpacked data for RelayerRemoved events raised by the Bridge contract.
type BridgeRelayerRemovedIterator struct {
	Event *BridgeRelayerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerRemoved represents a RelayerRemoved event raised by the Bridge contract.
type BridgeRelayerRemoved struct {
	Relayer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRelayerRemoved is a free log retrieval operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) FilterRelayerRemoved(opts *bind.FilterOpts, relayer []common.Address) (*BridgeRelayerRemovedIterator, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerRemoved", relayerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerRemovedIterator{contract: _Bridge.contract, event: "RelayerRemoved", logs: logs, sub: sub}, nil
}

// WatchRelayerRemoved is a free log subscription operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) WatchRelayerRemoved(opts *bind.WatchOpts, sink chan<- *BridgeRelayerRemoved, relayer []common.Address) (event.Subscription, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerRemoved", relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerRemoved)
				if err := _Bridge.contract.UnpackLog(event, "RelayerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerRemoved is a log parse operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) ParseRelayerRemoved(log types.Log) (*BridgeRelayerRemoved, error) {
	event := new(BridgeRelayerRemoved)
	if err := _Bridge.contract.UnpackLog(event, "RelayerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRelayerThresholdChangedIterator is returned from FilterRelayerThresholdChanged and is used to iterate over the raw logs and unpacked data for RelayerThresholdChanged events raised by the Bridge contract.
type BridgeRelayerThresholdChangedIterator struct {
	Event *BridgeRelayerThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdChanged represents a RelayerThresholdChanged event raised by the Bridge contract.
type BridgeRelayerThresholdChanged struct {
	NewThreshold *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdChanged is a free log retrieval operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdChanged(opts *bind.FilterOpts, newThreshold []*big.Int) (*BridgeRelayerThresholdChangedIterator, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdChangedIterator{contract: _Bridge.contract, event: "RelayerThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdChanged is a free log subscription operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdChanged(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdChanged, newThreshold []*big.Int) (event.Subscription, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdChanged)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdChanged is a log parse operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdChanged(log types.Log) (*BridgeRelayerThresholdChanged, error) {
	event := new(BridgeRelayerThresholdChanged)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Bridge contract.
type BridgeRoleGrantedIterator struct {
	Event *BridgeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRoleGranted represents a RoleGranted event raised by the Bridge contract.
type BridgeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRoleGrantedIterator{contract: _Bridge.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BridgeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRoleGranted)
				if err := _Bridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) ParseRoleGranted(log types.Log) (*BridgeRoleGranted, error) {
	event := new(BridgeRoleGranted)
	if err := _Bridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Bridge contract.
type BridgeRoleRevokedIterator struct {
	Event *BridgeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRoleRevoked represents a RoleRevoked event raised by the Bridge contract.
type BridgeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRoleRevokedIterator{contract: _Bridge.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BridgeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRoleRevoked)
				if err := _Bridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) ParseRoleRevoked(log types.Log) (*BridgeRoleRevoked, error) {
	event := new(BridgeRoleRevoked)
	if err := _Bridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Bridge contract.
type BridgeUnpausedIterator struct {
	Event *BridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnpaused represents a Unpaused event raised by the Bridge contract.
type BridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BridgeUnpausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BridgeUnpausedIterator{contract: _Bridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnpaused)
				if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) ParseUnpaused(log types.Log) (*BridgeUnpaused, error) {
	event := new(BridgeUnpaused)
	if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
